
200714_AudioShield_rfft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d488  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024ccc  08024ccc  0004020c  2**0
                  CONTENTS
  4 .ARM          00000008  08024ccc  08024ccc  00034ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024cd4  08024cd4  0004020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024cd4  08024cd4  00034cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024cd8  08024cd8  00034cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08024cdc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a78  2000020c  08024ee8  0004020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  08024ee8  00041c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000f4c9  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001a25d  00000000  00000000  0004f705  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000319d  00000000  00000000  00069962  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f28  00000000  00000000  0006cb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d3137  00000000  00000000  0006da28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000d60  00000000  00000000  00140b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00021664  00000000  00000000  001418c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162f24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf4  00000000  00000000  00162fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000020c 	.word	0x2000020c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800782c 	.word	0x0800782c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000210 	.word	0x20000210
 8000200:	0800782c 	.word	0x0800782c

08000204 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000204:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000206:	2b01      	cmp	r3, #1
	IT       LS
 8000208:	bf98      	it	ls
	BXLS     lr
 800020a:	4770      	bxls	lr
	PUSH     {r4-r9}
 800020c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000210:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000212:	089b      	lsrs	r3, r3, #2

08000214 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000214:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000218:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 800021c:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800021e:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 8000222:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000224:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000226:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000228:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 800022a:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800022e:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000232:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000234:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000238:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800023c:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000240:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000244:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000246:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 800024a:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800024e:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8000250:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000254:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000258:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 800025c:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8000260:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 8000262:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000264:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000266:	d1d5      	bne.n	8000214 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000268:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800026c:	4770      	bx	lr

0800026e <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800026e:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000270:	2b01      	cmp	r3, #1
	IT       LS
 8000272:	bf98      	it	ls
	BXLS     lr
 8000274:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000276:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800027a:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800027c:	089b      	lsrs	r3, r3, #2

0800027e <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800027e:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000282:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000286:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000288:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 800028c:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8000290:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000294:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000298:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 800029c:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002a0:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002a4:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002a6:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002aa:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ae:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002b2:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002b6:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002b8:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002ba:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002bc:	d1df      	bne.n	800027e <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002be:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_uldivmod>:
 80002c4:	b953      	cbnz	r3, 80002dc <__aeabi_uldivmod+0x18>
 80002c6:	b94a      	cbnz	r2, 80002dc <__aeabi_uldivmod+0x18>
 80002c8:	2900      	cmp	r1, #0
 80002ca:	bf08      	it	eq
 80002cc:	2800      	cmpeq	r0, #0
 80002ce:	bf1c      	itt	ne
 80002d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d8:	f000 b972 	b.w	80005c0 <__aeabi_idiv0>
 80002dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e4:	f000 f806 	bl	80002f4 <__udivmoddi4>
 80002e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f0:	b004      	add	sp, #16
 80002f2:	4770      	bx	lr

080002f4 <__udivmoddi4>:
 80002f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f8:	9e08      	ldr	r6, [sp, #32]
 80002fa:	4604      	mov	r4, r0
 80002fc:	4688      	mov	r8, r1
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d14b      	bne.n	800039a <__udivmoddi4+0xa6>
 8000302:	428a      	cmp	r2, r1
 8000304:	4615      	mov	r5, r2
 8000306:	d967      	bls.n	80003d8 <__udivmoddi4+0xe4>
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	b14a      	cbz	r2, 8000322 <__udivmoddi4+0x2e>
 800030e:	f1c2 0720 	rsb	r7, r2, #32
 8000312:	fa01 f302 	lsl.w	r3, r1, r2
 8000316:	fa20 f707 	lsr.w	r7, r0, r7
 800031a:	4095      	lsls	r5, r2
 800031c:	ea47 0803 	orr.w	r8, r7, r3
 8000320:	4094      	lsls	r4, r2
 8000322:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fbb8 f7fe 	udiv	r7, r8, lr
 800032c:	fa1f fc85 	uxth.w	ip, r5
 8000330:	fb0e 8817 	mls	r8, lr, r7, r8
 8000334:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000338:	fb07 f10c 	mul.w	r1, r7, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d909      	bls.n	8000354 <__udivmoddi4+0x60>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000346:	f080 811b 	bcs.w	8000580 <__udivmoddi4+0x28c>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 8118 	bls.w	8000580 <__udivmoddi4+0x28c>
 8000350:	3f02      	subs	r7, #2
 8000352:	442b      	add	r3, r5
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0fe 	udiv	r0, r3, lr
 800035c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 fc0c 	mul.w	ip, r0, ip
 8000368:	45a4      	cmp	ip, r4
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x8c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x290>
 8000376:	45a4      	cmp	ip, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x290>
 800037c:	3802      	subs	r0, #2
 800037e:	442c      	add	r4, r5
 8000380:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000384:	eba4 040c 	sub.w	r4, r4, ip
 8000388:	2700      	movs	r7, #0
 800038a:	b11e      	cbz	r6, 8000394 <__udivmoddi4+0xa0>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c6 4300 	strd	r4, r3, [r6]
 8000394:	4639      	mov	r1, r7
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xbe>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	f000 80eb 	beq.w	800057a <__udivmoddi4+0x286>
 80003a4:	2700      	movs	r7, #0
 80003a6:	e9c6 0100 	strd	r0, r1, [r6]
 80003aa:	4638      	mov	r0, r7
 80003ac:	4639      	mov	r1, r7
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f783 	clz	r7, r3
 80003b6:	2f00      	cmp	r7, #0
 80003b8:	d147      	bne.n	800044a <__udivmoddi4+0x156>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd0>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80fa 	bhi.w	80005b8 <__udivmoddi4+0x2c4>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	4698      	mov	r8, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa0>
 80003d2:	e9c6 4800 	strd	r4, r8, [r6]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa0>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xe8>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 808f 	bne.w	8000504 <__udivmoddi4+0x210>
 80003e6:	1b49      	subs	r1, r1, r5
 80003e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003ec:	fa1f f885 	uxth.w	r8, r5
 80003f0:	2701      	movs	r7, #1
 80003f2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f6:	0c23      	lsrs	r3, r4, #16
 80003f8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000400:	fb08 f10c 	mul.w	r1, r8, ip
 8000404:	4299      	cmp	r1, r3
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x124>
 8000408:	18eb      	adds	r3, r5, r3
 800040a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x122>
 8000410:	4299      	cmp	r1, r3
 8000412:	f200 80cd 	bhi.w	80005b0 <__udivmoddi4+0x2bc>
 8000416:	4684      	mov	ip, r0
 8000418:	1a59      	subs	r1, r3, r1
 800041a:	b2a3      	uxth	r3, r4
 800041c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000420:	fb0e 1410 	mls	r4, lr, r0, r1
 8000424:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000428:	fb08 f800 	mul.w	r8, r8, r0
 800042c:	45a0      	cmp	r8, r4
 800042e:	d907      	bls.n	8000440 <__udivmoddi4+0x14c>
 8000430:	192c      	adds	r4, r5, r4
 8000432:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x14a>
 8000438:	45a0      	cmp	r8, r4
 800043a:	f200 80b6 	bhi.w	80005aa <__udivmoddi4+0x2b6>
 800043e:	4618      	mov	r0, r3
 8000440:	eba4 0408 	sub.w	r4, r4, r8
 8000444:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000448:	e79f      	b.n	800038a <__udivmoddi4+0x96>
 800044a:	f1c7 0c20 	rsb	ip, r7, #32
 800044e:	40bb      	lsls	r3, r7
 8000450:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000454:	ea4e 0e03 	orr.w	lr, lr, r3
 8000458:	fa01 f407 	lsl.w	r4, r1, r7
 800045c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000460:	fa21 f30c 	lsr.w	r3, r1, ip
 8000464:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000468:	4325      	orrs	r5, r4
 800046a:	fbb3 f9f8 	udiv	r9, r3, r8
 800046e:	0c2c      	lsrs	r4, r5, #16
 8000470:	fb08 3319 	mls	r3, r8, r9, r3
 8000474:	fa1f fa8e 	uxth.w	sl, lr
 8000478:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800047c:	fb09 f40a 	mul.w	r4, r9, sl
 8000480:	429c      	cmp	r4, r3
 8000482:	fa02 f207 	lsl.w	r2, r2, r7
 8000486:	fa00 f107 	lsl.w	r1, r0, r7
 800048a:	d90b      	bls.n	80004a4 <__udivmoddi4+0x1b0>
 800048c:	eb1e 0303 	adds.w	r3, lr, r3
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000494:	f080 8087 	bcs.w	80005a6 <__udivmoddi4+0x2b2>
 8000498:	429c      	cmp	r4, r3
 800049a:	f240 8084 	bls.w	80005a6 <__udivmoddi4+0x2b2>
 800049e:	f1a9 0902 	sub.w	r9, r9, #2
 80004a2:	4473      	add	r3, lr
 80004a4:	1b1b      	subs	r3, r3, r4
 80004a6:	b2ad      	uxth	r5, r5
 80004a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004ac:	fb08 3310 	mls	r3, r8, r0, r3
 80004b0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b4:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b8:	45a2      	cmp	sl, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1da>
 80004bc:	eb1e 0404 	adds.w	r4, lr, r4
 80004c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c4:	d26b      	bcs.n	800059e <__udivmoddi4+0x2aa>
 80004c6:	45a2      	cmp	sl, r4
 80004c8:	d969      	bls.n	800059e <__udivmoddi4+0x2aa>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4474      	add	r4, lr
 80004ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	eba4 040a 	sub.w	r4, r4, sl
 80004da:	454c      	cmp	r4, r9
 80004dc:	46c2      	mov	sl, r8
 80004de:	464b      	mov	r3, r9
 80004e0:	d354      	bcc.n	800058c <__udivmoddi4+0x298>
 80004e2:	d051      	beq.n	8000588 <__udivmoddi4+0x294>
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d069      	beq.n	80005bc <__udivmoddi4+0x2c8>
 80004e8:	ebb1 050a 	subs.w	r5, r1, sl
 80004ec:	eb64 0403 	sbc.w	r4, r4, r3
 80004f0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f4:	40fd      	lsrs	r5, r7
 80004f6:	40fc      	lsrs	r4, r7
 80004f8:	ea4c 0505 	orr.w	r5, ip, r5
 80004fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000500:	2700      	movs	r7, #0
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f703 	lsr.w	r7, r0, r3
 800050c:	4095      	lsls	r5, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	fa21 f303 	lsr.w	r3, r1, r3
 8000516:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800051a:	4338      	orrs	r0, r7
 800051c:	0c01      	lsrs	r1, r0, #16
 800051e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000522:	fa1f f885 	uxth.w	r8, r5
 8000526:	fb0e 3317 	mls	r3, lr, r7, r3
 800052a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052e:	fb07 f308 	mul.w	r3, r7, r8
 8000532:	428b      	cmp	r3, r1
 8000534:	fa04 f402 	lsl.w	r4, r4, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x256>
 800053a:	1869      	adds	r1, r5, r1
 800053c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000540:	d22f      	bcs.n	80005a2 <__udivmoddi4+0x2ae>
 8000542:	428b      	cmp	r3, r1
 8000544:	d92d      	bls.n	80005a2 <__udivmoddi4+0x2ae>
 8000546:	3f02      	subs	r7, #2
 8000548:	4429      	add	r1, r5
 800054a:	1acb      	subs	r3, r1, r3
 800054c:	b281      	uxth	r1, r0
 800054e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000552:	fb0e 3310 	mls	r3, lr, r0, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb00 f308 	mul.w	r3, r0, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x27e>
 8000562:	1869      	adds	r1, r5, r1
 8000564:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000568:	d217      	bcs.n	800059a <__udivmoddi4+0x2a6>
 800056a:	428b      	cmp	r3, r1
 800056c:	d915      	bls.n	800059a <__udivmoddi4+0x2a6>
 800056e:	3802      	subs	r0, #2
 8000570:	4429      	add	r1, r5
 8000572:	1ac9      	subs	r1, r1, r3
 8000574:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000578:	e73b      	b.n	80003f2 <__udivmoddi4+0xfe>
 800057a:	4637      	mov	r7, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e709      	b.n	8000394 <__udivmoddi4+0xa0>
 8000580:	4607      	mov	r7, r0
 8000582:	e6e7      	b.n	8000354 <__udivmoddi4+0x60>
 8000584:	4618      	mov	r0, r3
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x8c>
 8000588:	4541      	cmp	r1, r8
 800058a:	d2ab      	bcs.n	80004e4 <__udivmoddi4+0x1f0>
 800058c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000590:	eb69 020e 	sbc.w	r2, r9, lr
 8000594:	3801      	subs	r0, #1
 8000596:	4613      	mov	r3, r2
 8000598:	e7a4      	b.n	80004e4 <__udivmoddi4+0x1f0>
 800059a:	4660      	mov	r0, ip
 800059c:	e7e9      	b.n	8000572 <__udivmoddi4+0x27e>
 800059e:	4618      	mov	r0, r3
 80005a0:	e795      	b.n	80004ce <__udivmoddi4+0x1da>
 80005a2:	4667      	mov	r7, ip
 80005a4:	e7d1      	b.n	800054a <__udivmoddi4+0x256>
 80005a6:	4681      	mov	r9, r0
 80005a8:	e77c      	b.n	80004a4 <__udivmoddi4+0x1b0>
 80005aa:	3802      	subs	r0, #2
 80005ac:	442c      	add	r4, r5
 80005ae:	e747      	b.n	8000440 <__udivmoddi4+0x14c>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	442b      	add	r3, r5
 80005b6:	e72f      	b.n	8000418 <__udivmoddi4+0x124>
 80005b8:	4638      	mov	r0, r7
 80005ba:	e708      	b.n	80003ce <__udivmoddi4+0xda>
 80005bc:	4637      	mov	r7, r6
 80005be:	e6e9      	b.n	8000394 <__udivmoddi4+0xa0>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b0a0      	sub	sp, #128	; 0x80
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 80005d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 80005e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005ea:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 80005ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005ee:	085b      	lsrs	r3, r3, #1
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80005f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 80005fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000602:	4413      	add	r3, r2
 8000604:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8000606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800060c:	e1b6      	b.n	800097c <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8000626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800062c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8000632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8000638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 800063e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8000644:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 800064a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8000650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8000656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 800065c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8000662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8000668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 800066e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000672:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	1d1a      	adds	r2, r3, #4
 800067a:	603a      	str	r2, [r7, #0]
 800067c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000680:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8000684:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000688:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	1d1a      	adds	r2, r3, #4
 8000690:	603a      	str	r2, [r7, #0]
 8000692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000696:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 800069a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800069e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	1d1a      	adds	r2, r3, #4
 80006a6:	603a      	str	r2, [r7, #0]
 80006a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ac:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 80006b0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80006b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	1d1a      	adds	r2, r3, #4
 80006bc:	603a      	str	r2, [r7, #0]
 80006be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c2:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 80006c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80006ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80006ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006d2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 80006d6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80006da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80006de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 80006e6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80006ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80006ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006f2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 80006f6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80006fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80006fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000702:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8000706:	ed97 7a06 	vldr	s14, [r7, #24]
 800070a:	edd7 7a02 	vldr	s15, [r7, #8]
 800070e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000710:	1d1a      	adds	r2, r3, #4
 8000712:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000718:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800071c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000720:	edd7 7a03 	vldr	s15, [r7, #12]
 8000724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000726:	1d1a      	adds	r2, r3, #4
 8000728:	67fa      	str	r2, [r7, #124]	; 0x7c
 800072a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072e:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8000732:	ed97 7a08 	vldr	s14, [r7, #32]
 8000736:	edd7 7a04 	vldr	s15, [r7, #16]
 800073a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800073c:	1d1a      	adds	r2, r3, #4
 800073e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000744:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8000748:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800074c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000750:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000752:	1d1a      	adds	r2, r3, #4
 8000754:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075a:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 800075e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000762:	edd7 7a06 	vldr	s15, [r7, #24]
 8000766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076a:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800076e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000772:	edd7 7a07 	vldr	s15, [r7, #28]
 8000776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800077a:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800077e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000782:	edd7 7a08 	vldr	s15, [r7, #32]
 8000786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800078a:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800078e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000792:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800079a:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800079e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007a0:	1d1a      	adds	r2, r3, #4
 80007a2:	673a      	str	r2, [r7, #112]	; 0x70
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80007a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	673a      	str	r2, [r7, #112]	; 0x70
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 80007b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80007b6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80007ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007be:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 80007c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80007c6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80007ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ce:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 80007d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80007d6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80007da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007de:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80007e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80007e6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80007ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ee:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80007f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007f4:	1d1a      	adds	r2, r3, #4
 80007f6:	677a      	str	r2, [r7, #116]	; 0x74
 80007f8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80007fc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000804:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8000808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800080a:	1d1a      	adds	r2, r3, #4
 800080c:	677a      	str	r2, [r7, #116]	; 0x74
 800080e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000812:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800081a:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800081e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000822:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800082e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000832:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800083a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800083e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000842:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 800084e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000852:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800085e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000860:	1d1a      	adds	r2, r3, #4
 8000862:	67ba      	str	r2, [r7, #120]	; 0x78
 8000864:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000868:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800086c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000870:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8000874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000876:	1d1a      	adds	r2, r3, #4
 8000878:	67ba      	str	r2, [r7, #120]	; 0x78
 800087a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800087e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000886:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 800088a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800088c:	1d1a      	adds	r2, r3, #4
 800088e:	673a      	str	r2, [r7, #112]	; 0x70
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8000894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000896:	1d1a      	adds	r2, r3, #4
 8000898:	673a      	str	r2, [r7, #112]	; 0x70
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 800089e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80008a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80008a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 80008ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80008b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80008b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 80008be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80008c2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80008c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 80008ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80008d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80008d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008da:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 80008de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008e0:	1d1a      	adds	r2, r3, #4
 80008e2:	677a      	str	r2, [r7, #116]	; 0x74
 80008e4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80008e8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80008ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f0:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80008f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008f6:	1d1a      	adds	r2, r3, #4
 80008f8:	677a      	str	r2, [r7, #116]	; 0x74
 80008fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80008fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000906:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 800090a:	edd7 7a04 	vldr	s15, [r7, #16]
 800090e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 800091a:	edd7 7a05 	vldr	s15, [r7, #20]
 800091e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000926:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 800092a:	edd7 7a05 	vldr	s15, [r7, #20]
 800092e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000936:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 800093a:	edd7 7a04 	vldr	s15, [r7, #16]
 800093e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000946:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800094a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800094c:	1d1a      	adds	r2, r3, #4
 800094e:	67ba      	str	r2, [r7, #120]	; 0x78
 8000950:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000954:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800095c:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8000960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000962:	1d1a      	adds	r2, r3, #4
 8000964:	67ba      	str	r2, [r7, #120]	; 0x78
 8000966:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800096a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800096e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000972:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 8000976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000978:	3b01      	subs	r3, #1
 800097a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800097c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800097e:	2b00      	cmp	r3, #0
 8000980:	f47f ae45 	bne.w	800060e <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8000984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000986:	b299      	uxth	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	2302      	movs	r3, #2
 800098e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000990:	f000 ff9e 	bl	80018d0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8000994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000996:	b299      	uxth	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	2302      	movs	r3, #2
 800099e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80009a0:	f000 ff96 	bl	80018d0 <arm_radix8_butterfly_f32>
}
 80009a4:	bf00      	nop
 80009a6:	3780      	adds	r7, #128	; 0x80
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0ac      	sub	sp, #176	; 0xb0
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	085b      	lsrs	r3, r3, #1
 80009bc:	b29b      	uxth	r3, r3
 80009be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80009c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80009d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80009da:	4413      	add	r3, r2
 80009dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80009e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80009ea:	4413      	add	r3, r2
 80009ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80009f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009f8:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80009fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009fe:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8000a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a04:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8000a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8000a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a14:	3b04      	subs	r3, #4
 8000a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8000a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8000a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000a2e:	4413      	add	r3, r2
 8000a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000a3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8000a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a50:	085b      	lsrs	r3, r3, #1
 8000a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	ed93 7a00 	vldr	s14, [r3]
 8000a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a6c:	edd3 7a00 	vldr	s15, [r3]
 8000a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a74:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	ed93 7a00 	vldr	s14, [r3]
 8000a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a8a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	3304      	adds	r3, #4
 8000a92:	ed93 7a00 	vldr	s14, [r3]
 8000a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	edd3 7a00 	vldr	s15, [r3]
 8000aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aa4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	3304      	adds	r3, #4
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abe:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	ed93 7a00 	vldr	s14, [r3]
 8000acc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ad8:	3304      	adds	r3, #4
 8000ada:	edd3 7a00 	vldr	s15, [r3]
 8000ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000ae6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000aea:	edd3 7a00 	vldr	s15, [r3]
 8000aee:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000af2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000afa:	edd3 7a00 	vldr	s15, [r3]
 8000afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b02:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000b06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b0a:	edd3 7a00 	vldr	s15, [r3]
 8000b0e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b1a:	edd3 7a00 	vldr	s15, [r3]
 8000b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b22:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	edd3 7a00 	vldr	s15, [r3]
 8000b30:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000b34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	edd3 7a00 	vldr	s15, [r3]
 8000b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b46:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b4e:	3304      	adds	r3, #4
 8000b50:	edd3 7a00 	vldr	s15, [r3]
 8000b54:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b60:	3304      	adds	r3, #4
 8000b62:	edd3 7a00 	vldr	s15, [r3]
 8000b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000b6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b72:	ed93 7a00 	vldr	s14, [r3]
 8000b76:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b82:	edd3 7a00 	vldr	s15, [r3]
 8000b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b8a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b92:	ed93 7a00 	vldr	s14, [r3]
 8000b96:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000b9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ba2:	edd3 7a00 	vldr	s15, [r3]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	1d1a      	adds	r2, r3, #4
 8000baa:	603a      	str	r2, [r7, #0]
 8000bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb0:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bb8:	3304      	adds	r3, #4
 8000bba:	ed93 7a00 	vldr	s14, [r3]
 8000bbe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bca:	3304      	adds	r3, #4
 8000bcc:	edd3 7a00 	vldr	s15, [r3]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	1d1a      	adds	r2, r3, #4
 8000bd4:	603a      	str	r2, [r7, #0]
 8000bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bda:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8000bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000be2:	1d1a      	adds	r2, r3, #4
 8000be4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bea:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8000bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bf0:	1d1a      	adds	r2, r3, #4
 8000bf2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bf8:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8000bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bfe:	1d1a      	adds	r2, r3, #4
 8000c00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000c04:	69fa      	ldr	r2, [r7, #28]
 8000c06:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8000c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c0c:	1d1a      	adds	r2, r3, #4
 8000c0e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000c12:	6a3a      	ldr	r2, [r7, #32]
 8000c14:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8000c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c1a:	1d1a      	adds	r2, r3, #4
 8000c1c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8000c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c28:	1d1a      	adds	r2, r3, #4
 8000c2a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8000c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000c3a:	4413      	add	r3, r2
 8000c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8000c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000c48:	4413      	add	r3, r2
 8000c4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8000c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000c56:	4413      	add	r3, r2
 8000c58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8000c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c60:	3b02      	subs	r3, #2
 8000c62:	085b      	lsrs	r3, r3, #1
 8000c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c68:	e31a      	b.n	80012a0 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	ed93 7a00 	vldr	s14, [r3]
 8000c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	ed93 7a00 	vldr	s14, [r3]
 8000c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c92:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	ed93 7a00 	vldr	s14, [r3]
 8000c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	ed93 7a00 	vldr	s14, [r3]
 8000cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cce:	3304      	adds	r3, #4
 8000cd0:	ed93 7a00 	vldr	s14, [r3]
 8000cd4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	edd3 7a00 	vldr	s15, [r3]
 8000ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cf2:	edd3 7a00 	vldr	s15, [r3]
 8000cf6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d02:	edd3 7a00 	vldr	s15, [r3]
 8000d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d12:	edd3 7a00 	vldr	s15, [r3]
 8000d16:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000d1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d22:	edd3 7a00 	vldr	s15, [r3]
 8000d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d32:	3304      	adds	r3, #4
 8000d34:	edd3 7a00 	vldr	s15, [r3]
 8000d38:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d44:	3304      	adds	r3, #4
 8000d46:	edd3 7a00 	vldr	s15, [r3]
 8000d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4e:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d56:	3304      	adds	r3, #4
 8000d58:	edd3 7a00 	vldr	s15, [r3]
 8000d5c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d68:	3304      	adds	r3, #4
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d7a:	ed93 7a00 	vldr	s14, [r3]
 8000d7e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d8a:	edd3 7a00 	vldr	s15, [r3]
 8000d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d92:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d9a:	ed93 7a00 	vldr	s14, [r3]
 8000d9e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	1d1a      	adds	r2, r3, #4
 8000db2:	603a      	str	r2, [r7, #0]
 8000db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	ed93 7a00 	vldr	s14, [r3]
 8000dc6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	edd3 7a00 	vldr	s15, [r3]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	1d1a      	adds	r2, r3, #4
 8000ddc:	603a      	str	r2, [r7, #0]
 8000dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de2:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dea:	3b04      	subs	r3, #4
 8000dec:	ed93 7a00 	vldr	s14, [r3]
 8000df0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000df4:	3b04      	subs	r3, #4
 8000df6:	edd3 7a00 	vldr	s15, [r3]
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8000e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e06:	3b04      	subs	r3, #4
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e10:	3b04      	subs	r3, #4
 8000e12:	edd3 7a00 	vldr	s15, [r3]
 8000e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e1a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8000e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e22:	ed93 7a00 	vldr	s14, [r3]
 8000e26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e2a:	edd3 7a00 	vldr	s15, [r3]
 8000e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e32:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8000e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e3a:	ed93 7a00 	vldr	s14, [r3]
 8000e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e42:	edd3 7a00 	vldr	s15, [r3]
 8000e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8000e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e52:	ed93 7a00 	vldr	s14, [r3]
 8000e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e62:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e72:	ed93 7a00 	vldr	s14, [r3]
 8000e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e86:	3b04      	subs	r3, #4
 8000e88:	edd3 7a00 	vldr	s15, [r3]
 8000e8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e94:	3b04      	subs	r3, #4
 8000e96:	edd3 7a00 	vldr	s15, [r3]
 8000e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000eb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000eb8:	3b04      	subs	r3, #4
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8000ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000eca:	edd3 7a00 	vldr	s15, [r3]
 8000ece:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000ed2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8000ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ef2:	edd3 7a00 	vldr	s15, [r3]
 8000ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000efa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f02:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	ed93 7a00 	vldr	s14, [r3]
 8000f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f14:	3b04      	subs	r3, #4
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f1e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f26:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8000f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f2e:	ed93 7a00 	vldr	s14, [r3]
 8000f32:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f46:	1f1a      	subs	r2, r3, #4
 8000f48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f58:	3b04      	subs	r3, #4
 8000f5a:	ed93 7a00 	vldr	s14, [r3]
 8000f5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f74:	1f1a      	subs	r2, r3, #4
 8000f76:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7e:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8000f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f86:	1d1a      	adds	r2, r3, #4
 8000f88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8000f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f94:	1d1a      	adds	r2, r3, #4
 8000f96:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8000f9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fa2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000faa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8000fae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000fb2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8000fbe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000fc2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8000fce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fd2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fda:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8000fde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fe2:	1d1a      	adds	r2, r3, #4
 8000fe4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000fe8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000fec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8000ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ffc:	1d1a      	adds	r2, r3, #4
 8000ffe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001002:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001006:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800100a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100e:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8001012:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001016:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800101a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8001022:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001026:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800102a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8001032:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001036:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800103a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8001042:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001046:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800104a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8001052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001056:	1f1a      	subs	r2, r3, #4
 8001058:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800105c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001060:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001068:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 800106c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001070:	1f1a      	subs	r2, r3, #4
 8001072:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001076:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800107a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8001086:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800108e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8001096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800109e:	4413      	add	r3, r2
 80010a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 80010a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80010a8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80010ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 80010b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 80010c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80010cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 80010d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80010d8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 80010e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010e8:	1d1a      	adds	r2, r3, #4
 80010ea:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80010ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80010f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fa:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 80010fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001102:	1d1a      	adds	r2, r3, #4
 8001104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001108:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800110c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8001118:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800111c:	eef1 7a67 	vneg.f32	s15, s15
 8001120:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001128:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800112c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001130:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 800113c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001140:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 800114c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001150:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 800115c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001160:	1f1a      	subs	r2, r3, #4
 8001162:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001166:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800116a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800116e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001172:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8001176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800117a:	1f1a      	subs	r2, r3, #4
 800117c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001180:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001184:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8001190:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8001198:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 80011a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80011a8:	4413      	add	r3, r2
 80011aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 80011ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 80011be:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 80011ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80011d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 80011de:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 80011ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011f2:	1d1a      	adds	r2, r3, #4
 80011f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80011f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80011fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001204:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8001208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800120c:	1d1a      	adds	r2, r3, #4
 800120e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001212:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001216:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800121a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121e:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8001222:	edd7 7a06 	vldr	s15, [r7, #24]
 8001226:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8001232:	edd7 7a05 	vldr	s15, [r7, #20]
 8001236:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800123a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8001242:	edd7 7a05 	vldr	s15, [r7, #20]
 8001246:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8001252:	edd7 7a06 	vldr	s15, [r7, #24]
 8001256:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8001262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001266:	1f1a      	subs	r2, r3, #4
 8001268:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800126c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001270:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001278:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 800127c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001280:	1f1a      	subs	r2, r3, #4
 8001282:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001286:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800128a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800129a:	3b01      	subs	r3, #1
 800129c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f47f ace0 	bne.w	8000c6a <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012bc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	ed93 7a00 	vldr	s14, [r3]
 80012c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012e2:	3304      	adds	r3, #4
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3304      	adds	r3, #4
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012fc:	3304      	adds	r3, #4
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001306:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800130a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800130e:	3304      	adds	r3, #4
 8001310:	ed93 7a00 	vldr	s14, [r3]
 8001314:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800131c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001320:	3304      	adds	r3, #4
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800132e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800133a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800133e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800134e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800135a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800135e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800136e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001372:	3304      	adds	r3, #4
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001384:	3304      	adds	r3, #4
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138e:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001396:	3304      	adds	r3, #4
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013a8:	3304      	adds	r3, #4
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80013b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ba:	ed93 7a00 	vldr	s14, [r3]
 80013be:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80013d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80013e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	1d1a      	adds	r2, r3, #4
 80013f2:	603a      	str	r2, [r7, #0]
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80013fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001400:	3304      	adds	r3, #4
 8001402:	ed93 7a00 	vldr	s14, [r3]
 8001406:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800140a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800140e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001412:	3304      	adds	r3, #4
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	1d1a      	adds	r2, r3, #4
 800141c:	603a      	str	r2, [r7, #0]
 800141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001422:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8001426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800142e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001436:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800143a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800143e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001442:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001446:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800144a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800144e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001452:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001456:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800145a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800145e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001462:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001466:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800146a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001472:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001476:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800147a:	1d1a      	adds	r2, r3, #4
 800147c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001480:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001484:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001494:	1d1a      	adds	r2, r3, #4
 8001496:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800149a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800149e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a6:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 80014aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80014b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80014ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80014be:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80014ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80014ce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80014da:	edd7 7a08 	vldr	s15, [r7, #32]
 80014de:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80014e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80014ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80014fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014fe:	1d1a      	adds	r2, r3, #4
 8001500:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001504:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001508:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800150c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001510:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001518:	1d1a      	adds	r2, r3, #4
 800151a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800151e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001522:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152a:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800152e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800153e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001542:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800154e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001552:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800155e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001562:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800156e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001572:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800157e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001582:	1d1a      	adds	r2, r3, #4
 8001584:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001588:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800158c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800159c:	1d1a      	adds	r2, r3, #4
 800159e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80015a2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80015a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ae:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80015b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015b6:	b299      	uxth	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	2304      	movs	r3, #4
 80015be:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80015c0:	f000 f986 	bl	80018d0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 80015c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015c8:	b299      	uxth	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	2304      	movs	r3, #4
 80015d0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80015d2:	f000 f97d 	bl	80018d0 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 80015d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015da:	b299      	uxth	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	2304      	movs	r3, #4
 80015e2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80015e4:	f000 f974 	bl	80018d0 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 80015e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015ec:	b299      	uxth	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	2304      	movs	r3, #4
 80015f4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80015f6:	f000 f96b 	bl	80018d0 <arm_radix8_butterfly_f32>
}
 80015fa:	bf00      	nop
 80015fc:	37b0      	adds	r7, #176	; 0xb0
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b088      	sub	sp, #32
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	4611      	mov	r1, r2
 800160e:	461a      	mov	r2, r3
 8001610:	460b      	mov	r3, r1
 8001612:	71fb      	strb	r3, [r7, #7]
 8001614:	4613      	mov	r3, r2
 8001616:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d117      	bne.n	8001654 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	3304      	adds	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e00d      	b.n	800164c <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eef1 7a67 	vneg.f32	s15, s15
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3308      	adds	r3, #8
 8001644:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3301      	adds	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3ed      	bcc.n	8001630 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800165a:	d024      	beq.n	80016a6 <arm_cfft_f32+0xa4>
 800165c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001660:	d80b      	bhi.n	800167a <arm_cfft_f32+0x78>
 8001662:	2b20      	cmp	r3, #32
 8001664:	d01f      	beq.n	80016a6 <arm_cfft_f32+0xa4>
 8001666:	2b20      	cmp	r3, #32
 8001668:	d802      	bhi.n	8001670 <arm_cfft_f32+0x6e>
 800166a:	2b10      	cmp	r3, #16
 800166c:	d016      	beq.n	800169c <arm_cfft_f32+0x9a>
 800166e:	e028      	b.n	80016c2 <arm_cfft_f32+0xc0>
 8001670:	2b40      	cmp	r3, #64	; 0x40
 8001672:	d01d      	beq.n	80016b0 <arm_cfft_f32+0xae>
 8001674:	2b80      	cmp	r3, #128	; 0x80
 8001676:	d011      	beq.n	800169c <arm_cfft_f32+0x9a>
 8001678:	e023      	b.n	80016c2 <arm_cfft_f32+0xc0>
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167e:	d00d      	beq.n	800169c <arm_cfft_f32+0x9a>
 8001680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001684:	d803      	bhi.n	800168e <arm_cfft_f32+0x8c>
 8001686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168a:	d011      	beq.n	80016b0 <arm_cfft_f32+0xae>
 800168c:	e019      	b.n	80016c2 <arm_cfft_f32+0xc0>
 800168e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001692:	d008      	beq.n	80016a6 <arm_cfft_f32+0xa4>
 8001694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001698:	d00a      	beq.n	80016b0 <arm_cfft_f32+0xae>
 800169a:	e012      	b.n	80016c2 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7fe ff90 	bl	80005c4 <arm_cfft_radix8by2_f32>
        break;
 80016a4:	e00d      	b.n	80016c2 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff f97f 	bl	80009ac <arm_cfft_radix8by4_f32>
        break;
 80016ae:	e008      	b.n	80016c2 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	b299      	uxth	r1, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	2301      	movs	r3, #1
 80016ba:	68b8      	ldr	r0, [r7, #8]
 80016bc:	f000 f908 	bl	80018d0 <arm_radix8_butterfly_f32>
        break;
 80016c0:	bf00      	nop
    }  

    if( bitReverseFlag )
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8999      	ldrh	r1, [r3, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	461a      	mov	r2, r3
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f7fe fd96 	bl	8000204 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d130      	bne.n	8001740 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f0:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	e01c      	b.n	8001738 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1d1a      	adds	r2, r3, #4
 8001702:	61ba      	str	r2, [r7, #24]
 8001704:	ed93 7a00 	vldr	s14, [r3]
 8001708:	edd7 7a04 	vldr	s15, [r7, #16]
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	eeb1 7a67 	vneg.f32	s14, s15
 800171e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	3304      	adds	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3301      	adds	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	d3de      	bcc.n	80016fe <arm_cfft_f32+0xfc>
        }
    }
}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800176c:	d052      	beq.n	8001814 <arm_cfft_init_f32+0xcc>
 800176e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001772:	dc0b      	bgt.n	800178c <arm_cfft_init_f32+0x44>
 8001774:	2b20      	cmp	r3, #32
 8001776:	d074      	beq.n	8001862 <arm_cfft_init_f32+0x11a>
 8001778:	2b20      	cmp	r3, #32
 800177a:	dc02      	bgt.n	8001782 <arm_cfft_init_f32+0x3a>
 800177c:	2b10      	cmp	r3, #16
 800177e:	d07d      	beq.n	800187c <arm_cfft_init_f32+0x134>
 8001780:	e089      	b.n	8001896 <arm_cfft_init_f32+0x14e>
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d060      	beq.n	8001848 <arm_cfft_init_f32+0x100>
 8001786:	2b80      	cmp	r3, #128	; 0x80
 8001788:	d051      	beq.n	800182e <arm_cfft_init_f32+0xe6>
 800178a:	e084      	b.n	8001896 <arm_cfft_init_f32+0x14e>
 800178c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001790:	d026      	beq.n	80017e0 <arm_cfft_init_f32+0x98>
 8001792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001796:	dc03      	bgt.n	80017a0 <arm_cfft_init_f32+0x58>
 8001798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179c:	d02d      	beq.n	80017fa <arm_cfft_init_f32+0xb2>
 800179e:	e07a      	b.n	8001896 <arm_cfft_init_f32+0x14e>
 80017a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017a4:	d00f      	beq.n	80017c6 <arm_cfft_init_f32+0x7e>
 80017a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017aa:	d174      	bne.n	8001896 <arm_cfft_init_f32+0x14e>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 80017ac:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <arm_cfft_init_f32+0x164>)
 80017ae:	899a      	ldrh	r2, [r3, #12]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	819a      	strh	r2, [r3, #12]
 80017b4:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <arm_cfft_init_f32+0x164>)
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <arm_cfft_init_f32+0x164>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	605a      	str	r2, [r3, #4]
            break;
 80017c4:	e06a      	b.n	800189c <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <arm_cfft_init_f32+0x168>)
 80017c8:	899a      	ldrh	r2, [r3, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	819a      	strh	r2, [r3, #12]
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <arm_cfft_init_f32+0x168>)
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <arm_cfft_init_f32+0x168>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	605a      	str	r2, [r3, #4]

            break;
 80017de:	e05d      	b.n	800189c <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <arm_cfft_init_f32+0x16c>)
 80017e2:	899a      	ldrh	r2, [r3, #12]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	819a      	strh	r2, [r3, #12]
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <arm_cfft_init_f32+0x16c>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <arm_cfft_init_f32+0x16c>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	605a      	str	r2, [r3, #4]

            break;
 80017f8:	e050      	b.n	800189c <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <arm_cfft_init_f32+0x170>)
 80017fc:	899a      	ldrh	r2, [r3, #12]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	819a      	strh	r2, [r3, #12]
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <arm_cfft_init_f32+0x170>)
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <arm_cfft_init_f32+0x170>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	605a      	str	r2, [r3, #4]
            break;
 8001812:	e043      	b.n	800189c <arm_cfft_init_f32+0x154>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <arm_cfft_init_f32+0x174>)
 8001816:	899a      	ldrh	r2, [r3, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	819a      	strh	r2, [r3, #12]
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <arm_cfft_init_f32+0x174>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <arm_cfft_init_f32+0x174>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	605a      	str	r2, [r3, #4]
            break;
 800182c:	e036      	b.n	800189c <arm_cfft_init_f32+0x154>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <arm_cfft_init_f32+0x178>)
 8001830:	899a      	ldrh	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	819a      	strh	r2, [r3, #12]
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <arm_cfft_init_f32+0x178>)
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <arm_cfft_init_f32+0x178>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	605a      	str	r2, [r3, #4]
            break;
 8001846:	e029      	b.n	800189c <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <arm_cfft_init_f32+0x17c>)
 800184a:	899a      	ldrh	r2, [r3, #12]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	819a      	strh	r2, [r3, #12]
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <arm_cfft_init_f32+0x17c>)
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <arm_cfft_init_f32+0x17c>)
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	605a      	str	r2, [r3, #4]
            break;
 8001860:	e01c      	b.n	800189c <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <arm_cfft_init_f32+0x180>)
 8001864:	899a      	ldrh	r2, [r3, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	819a      	strh	r2, [r3, #12]
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <arm_cfft_init_f32+0x180>)
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <arm_cfft_init_f32+0x180>)
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	605a      	str	r2, [r3, #4]
            break;
 800187a:	e00f      	b.n	800189c <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <arm_cfft_init_f32+0x184>)
 800187e:	899a      	ldrh	r2, [r3, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	819a      	strh	r2, [r3, #12]
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <arm_cfft_init_f32+0x184>)
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <arm_cfft_init_f32+0x184>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	605a      	str	r2, [r3, #4]
            break;
 8001894:	e002      	b.n	800189c <arm_cfft_init_f32+0x154>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 8001896:	23ff      	movs	r3, #255	; 0xff
 8001898:	73fb      	strb	r3, [r7, #15]
            break;
 800189a:	bf00      	nop
        }


        return (status);
 800189c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	08024c9c 	.word	0x08024c9c
 80018b0:	08024c8c 	.word	0x08024c8c
 80018b4:	08024c7c 	.word	0x08024c7c
 80018b8:	08024c6c 	.word	0x08024c6c
 80018bc:	08024c5c 	.word	0x08024c5c
 80018c0:	08024c4c 	.word	0x08024c4c
 80018c4:	08024c3c 	.word	0x08024c3c
 80018c8:	08024c2c 	.word	0x08024c2c
 80018cc:	08024c1c 	.word	0x08024c1c

080018d0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b0bd      	sub	sp, #244	; 0xf4
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	461a      	mov	r2, r3
 80018dc:	460b      	mov	r3, r1
 80018de:	817b      	strh	r3, [r7, #10]
 80018e0:	4613      	mov	r3, r2
 80018e2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <arm_radix8_butterfly_f32+0x3c>)
 80018e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80018ea:	897b      	ldrh	r3, [r7, #10]
 80018ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80018f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80018f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001908:	e002      	b.n	8001910 <arm_radix8_butterfly_f32+0x40>
 800190a:	bf00      	nop
 800190c:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8001910:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001918:	4413      	add	r3, r2
 800191a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800191e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001926:	4413      	add	r3, r2
 8001928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800192c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001934:	4413      	add	r3, r2
 8001936:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800193a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800193e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8001948:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800194c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001950:	4413      	add	r3, r2
 8001952:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8001956:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800195a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800195e:	4413      	add	r3, r2
 8001960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8001964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800196c:	4413      	add	r3, r2
 800196e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001972:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	ed93 7a00 	vldr	s14, [r3]
 8001980:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8001996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	ed93 7a00 	vldr	s14, [r3]
 80019a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80019ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4413      	add	r3, r2
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019da:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80019de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fe:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001a02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	ed93 7a00 	vldr	s14, [r3]
 8001a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001a26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	ed93 7a00 	vldr	s14, [r3]
 8001a34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a46:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	ed93 7a00 	vldr	s14, [r3]
 8001a58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4413      	add	r3, r2
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8001a6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8001a92:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001a96:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8001aa2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001aa6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8001ab2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001ab6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abe:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8001ac2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001ac6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8001ad2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001ae0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8001aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001afa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b02:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001b06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8001b2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	3304      	adds	r3, #4
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	ed93 7a00 	vldr	s14, [r3]
 8001b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	3304      	adds	r3, #4
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4413      	add	r3, r2
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b52:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	ed93 7a00 	vldr	s14, [r3]
 8001b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8001b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	3304      	adds	r3, #4
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4413      	add	r3, r2
 8001b8a:	ed93 7a00 	vldr	s14, [r3]
 8001b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	3304      	adds	r3, #4
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001ba6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	3304      	adds	r3, #4
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bca:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8001bce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	3304      	adds	r3, #4
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	ed93 7a00 	vldr	s14, [r3]
 8001c06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4413      	add	r3, r2
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8001c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	3304      	adds	r3, #4
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	ed93 7a00 	vldr	s14, [r3]
 8001c2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	3304      	adds	r3, #4
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c42:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8001c46:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001c4a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c52:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8001c56:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001c5a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8001c66:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001c6a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c72:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8001c76:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001c7a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c82:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8001c86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001c96:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8001ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	3304      	adds	r3, #4
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001cb2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8001cbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001ccc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8001cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001ce6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8001cf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001d02:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8001d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	3304      	adds	r3, #4
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001d1e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d26:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8001d2a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001d2e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d36:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8001d42:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001d46:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8001d5a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001d5e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d66:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8001d72:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001d76:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d86:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8001d8a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001d8e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d96:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8001d9a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001d9e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8001daa:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8001dae:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8001dba:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8001dbe:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8001dca:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001dce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8001dda:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001dde:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8001dea:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001dee:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8001dfa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001dfe:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e06:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8001e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001e18:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e20:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8001e24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001e32:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8001e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001e4c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8001e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001e66:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	3304      	adds	r3, #4
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001e82:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8001e8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	3304      	adds	r3, #4
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001e9e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8001eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001eba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8001ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	3304      	adds	r3, #4
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001ed6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ede:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8001ee2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001eea:	4413      	add	r3, r2
 8001eec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8001ef0:	897b      	ldrh	r3, [r7, #10]
 8001ef2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	f4ff ad0a 	bcc.w	8001910 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8001efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f00:	2b07      	cmp	r3, #7
 8001f02:	f240 84e3 	bls.w	80028cc <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8001f12:	893b      	ldrh	r3, [r7, #8]
 8001f14:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f18:	4413      	add	r3, r2
 8001f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8001f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8001f22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f28:	4413      	add	r3, r2
 8001f2a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8001f2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f30:	4413      	add	r3, r2
 8001f32:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8001f34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f38:	4413      	add	r3, r2
 8001f3a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8001f3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f40:	4413      	add	r3, r2
 8001f42:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8001f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f48:	4413      	add	r3, r2
 8001f4a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8001f4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f50:	4413      	add	r3, r2
 8001f52:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8001f54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8001f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8001f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8001f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8001f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8001f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8001f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8001faa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8001fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	3304      	adds	r3, #4
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8001fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	3304      	adds	r3, #4
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8001fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	3304      	adds	r3, #4
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8001ff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	3304      	adds	r3, #4
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800200e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002016:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800201a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800201e:	4413      	add	r3, r2
 8002020:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002024:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800202c:	4413      	add	r3, r2
 800202e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002032:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203a:	4413      	add	r3, r2
 800203c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002040:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002048:	4413      	add	r3, r2
 800204a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800204e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002056:	4413      	add	r3, r2
 8002058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800205c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002064:	4413      	add	r3, r2
 8002066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800206a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800206e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002072:	4413      	add	r3, r2
 8002074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800209c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	ed93 7a00 	vldr	s14, [r3]
 80020aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020bc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80020c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4413      	add	r3, r2
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80020e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4413      	add	r3, r2
 80020ee:	ed93 7a00 	vldr	s14, [r3]
 80020f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002104:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002108:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800212c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4413      	add	r3, r2
 8002136:	ed93 7a00 	vldr	s14, [r3]
 800213a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800214c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002150:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4413      	add	r3, r2
 800215a:	ed93 7a00 	vldr	s14, [r3]
 800215e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002170:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	ed93 7a00 	vldr	s14, [r3]
 8002182:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002194:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002198:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800219c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80021a8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80021ac:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80021b8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80021bc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80021c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80021c8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80021cc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80021d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80021e6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 80021f2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80021f6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002202:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	3304      	adds	r3, #4
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4413      	add	r3, r2
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	3304      	adds	r3, #4
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800222a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	3304      	adds	r3, #4
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	3304      	adds	r3, #4
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	3304      	adds	r3, #4
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	ed93 7a00 	vldr	s14, [r3]
 8002262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	3304      	adds	r3, #4
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4413      	add	r3, r2
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002276:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800227a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	3304      	adds	r3, #4
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	3304      	adds	r3, #4
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80022a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	3304      	adds	r3, #4
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	ed93 7a00 	vldr	s14, [r3]
 80022b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	3304      	adds	r3, #4
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80022ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	3304      	adds	r3, #4
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4413      	add	r3, r2
 80022d6:	ed93 7a00 	vldr	s14, [r3]
 80022da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	3304      	adds	r3, #4
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ee:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80022f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	3304      	adds	r3, #4
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4413      	add	r3, r2
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	3304      	adds	r3, #4
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002316:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800231a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	3304      	adds	r3, #4
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	ed93 7a00 	vldr	s14, [r3]
 800232a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	3304      	adds	r3, #4
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4413      	add	r3, r2
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800233e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8002342:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002346:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800234a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8002352:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002356:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8002362:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002366:	edd7 7a08 	vldr	s15, [r7, #32]
 800236a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8002372:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002376:	edd7 7a08 	vldr	s15, [r7, #32]
 800237a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8002382:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002386:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800238a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8002392:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002396:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800239a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80023a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	3304      	adds	r3, #4
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4413      	add	r3, r2
 80023ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ba:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80023be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 80023ce:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80023d2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80023d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 80023de:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80023e2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80023e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ea:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 80023ee:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80023f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 80023fe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002402:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800240e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002412:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800241e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002422:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800242e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	ed97 7a07 	vldr	s14, [r7, #28]
 800243c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002444:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	3304      	adds	r3, #4
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	ed97 7a05 	vldr	s14, [r7, #20]
 8002458:	edd7 7a04 	vldr	s15, [r7, #16]
 800245c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002460:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002464:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002468:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800246c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002470:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002474:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002478:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002484:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002488:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002494:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002498:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800249c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80024a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4413      	add	r3, r2
 80024ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80024b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ba:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80024be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	3304      	adds	r3, #4
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80024ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80024da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024de:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 80024ea:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024ee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80024fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024fe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800250a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800250e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800251a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	ed97 7a07 	vldr	s14, [r7, #28]
 8002528:	edd7 7a06 	vldr	s15, [r7, #24]
 800252c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002530:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	3304      	adds	r3, #4
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	ed97 7a05 	vldr	s14, [r7, #20]
 8002544:	edd7 7a04 	vldr	s15, [r7, #16]
 8002548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8002550:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002554:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800255c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8002568:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800256c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002574:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8002580:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002584:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002594:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8002598:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800259c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80025a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80025a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ac:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80025b0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80025b4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80025c0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80025c4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80025c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025cc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80025d0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80025d4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80025d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025dc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80025e0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80025e4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80025e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ec:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80025f0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80025f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8002600:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002604:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8002610:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002614:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800261c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8002620:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002624:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8002630:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002634:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8002640:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002644:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8002650:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002654:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8002660:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002664:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8002670:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002674:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8002680:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002684:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8002690:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002694:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80026a0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80026a4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80026a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ac:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80026b0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80026b4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80026c0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80026c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80026d0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80026d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026dc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80026e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80026e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ec:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80026f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80026fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800270a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	3304      	adds	r3, #4
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	ed97 7a05 	vldr	s14, [r7, #20]
 800271a:	edd7 7a04 	vldr	s15, [r7, #16]
 800271e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002722:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8002726:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800272a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8002736:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800273a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8002746:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800274a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800274e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002752:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8002756:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800275a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800275e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002762:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8002766:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	ed97 7a07 	vldr	s14, [r7, #28]
 8002774:	edd7 7a06 	vldr	s15, [r7, #24]
 8002778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8002780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	3304      	adds	r3, #4
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002790:	edd7 7a04 	vldr	s15, [r7, #16]
 8002794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002798:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800279c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80027a0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80027ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80027b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80027b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80027bc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80027c0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80027c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80027cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80027d0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80027d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80027dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80027ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80027ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80027f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	3304      	adds	r3, #4
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4413      	add	r3, r2
 8002802:	ed97 7a05 	vldr	s14, [r7, #20]
 8002806:	edd7 7a04 	vldr	s15, [r7, #16]
 800280a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8002812:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002816:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8002822:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002826:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800282a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8002832:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002836:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8002842:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002846:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800284a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8002852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002860:	edd7 7a06 	vldr	s15, [r7, #24]
 8002864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002868:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800286c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	3304      	adds	r3, #4
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	ed97 7a05 	vldr	s14, [r7, #20]
 800287c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8002888:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800288c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002890:	4413      	add	r3, r2
 8002892:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8002896:	897b      	ldrh	r3, [r7, #10]
 8002898:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800289c:	429a      	cmp	r2, r3
 800289e:	f4ff abba 	bcc.w	8002016 <arm_radix8_butterfly_f32+0x746>

         j++;
 80028a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a6:	3301      	adds	r3, #1
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80028ac:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b4:	429a      	cmp	r2, r3
 80028b6:	f4ff ab2c 	bcc.w	8001f12 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80028ba:	893b      	ldrh	r3, [r7, #8]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80028c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c4:	2b07      	cmp	r3, #7
 80028c6:	f63f a813 	bhi.w	80018f0 <arm_radix8_butterfly_f32+0x20>
}
 80028ca:	e000      	b.n	80028ce <arm_radix8_butterfly_f32+0xffe>
         break;
 80028cc:	bf00      	nop
}
 80028ce:	bf00      	nop
 80028d0:	37f4      	adds	r7, #244	; 0xf4
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop

080028dc <arm_cmplx_conj_f32>:
#else
void arm_cmplx_conj_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined (ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80028ec:	e016      	b.n	800291c <arm_cmplx_conj_f32+0x40>
  {
    /* C[0] + jC[1] = A[0]+ j(-1)A[1] */

    /* Calculate Complex Conjugate and store result in destination buffer. */
    *pDst++ =  *pSrc++;
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	1d13      	adds	r3, r2, #4
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	1d19      	adds	r1, r3, #4
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	601a      	str	r2, [r3, #0]
    *pDst++ = -*pSrc++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1d1a      	adds	r2, r3, #4
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	edd3 7a00 	vldr	s15, [r3]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	60ba      	str	r2, [r7, #8]
 800290e:	eef1 7a67 	vneg.f32	s15, s15
 8002912:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3b01      	subs	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e5      	bne.n	80028ee <arm_cmplx_conj_f32+0x12>
  }

}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <arm_mat_cmplx_mult_f32>:
#else
arm_status arm_mat_cmplx_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800292e:	b480      	push	{r7}
 8002930:	b097      	sub	sp, #92	; 0x5c
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	657b      	str	r3, [r7, #84]	; 0x54
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	653b      	str	r3, [r7, #80]	; 0x50
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	885b      	ldrh	r3, [r3, #2]
 800295c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	885b      	ldrh	r3, [r3, #2]
 8002962:	847b      	strh	r3, [r7, #34]	; 0x22
  float32_t sumReal, sumImag;                    /* Accumulator */
  float32_t a1, b1, c1, d1;
  uint32_t col, i = 0U, j, row = numRowsA, colCnt; /* loop counters */
 8002964:	2300      	movs	r3, #0
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
 8002968:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + 2 * i;
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002972:	4413      	add	r3, r2
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8002976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002978:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	653b      	str	r3, [r7, #80]	; 0x50

      j = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	637b      	str	r3, [r7, #52]	; 0x34

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sumReal = 0.0f;
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	647b      	str	r3, [r7, #68]	; 0x44
        sumImag = 0.0f;
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	643b      	str	r3, [r7, #64]	; 0x40

        /* Initiate pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8002990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002992:	657b      	str	r3, [r7, #84]	; 0x54
        colCnt = numColsA % 0x4U;

#else

        /* Initialize blkCnt with number of samples */
        colCnt = numColsA;
 8002994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8002998:	e047      	b.n	8002a2a <arm_mat_cmplx_mult_f32+0xfc>
        {
          /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
          a1 = *(pIn1     );
 800299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61fb      	str	r3, [r7, #28]
          c1 = *(pIn2     );
 80029a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
          b1 = *(pIn1 + 1U);
 80029a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	617b      	str	r3, [r7, #20]
          d1 = *(pIn2 + 1U);
 80029ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]

          /* Multiply and Accumlates */
          sumReal += a1 * c1;
 80029b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80029b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029be:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80029c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
          sumImag += b1 * c1;
 80029ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80029ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80029d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029de:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

          /* update pointers */
          pIn1 += 2U;
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	3308      	adds	r3, #8
 80029e6:	657b      	str	r3, [r7, #84]	; 0x54
          pIn2 += 2 * numColsB;
 80029e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	461a      	mov	r2, r3
 80029ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f0:	4413      	add	r3, r2
 80029f2:	653b      	str	r3, [r7, #80]	; 0x50

          /* Multiply and Accumlates */
          sumReal -= b1 * d1;
 80029f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80029f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a00:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a08:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
          sumImag += a1 * d1;
 8002a0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a10:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a18:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	3b01      	subs	r3, #1
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (colCnt > 0U)
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1b4      	bne.n	800299a <arm_mat_cmplx_mult_f32+0x6c>
        }

        /* Store result in destination buffer */
        *px++ = sumReal;
 8002a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a32:	1d1a      	adds	r2, r3, #4
 8002a34:	64ba      	str	r2, [r7, #72]	; 0x48
 8002a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a38:	601a      	str	r2, [r3, #0]
        *px++ = sumImag;
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3c:	1d1a      	adds	r2, r3, #4
 8002a3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a42:	601a      	str	r2, [r3, #0]

        /* Update pointer pIn2 to point to starting address of next column */
        j++;
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	3301      	adds	r3, #1
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
        pIn2 = pSrcB->pData + 2U * j;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	653b      	str	r3, [r7, #80]	; 0x50

        /* Decrement column loop counter */
        col--;
 8002a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c

      } while (col > 0U);
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d190      	bne.n	8002984 <arm_mat_cmplx_mult_f32+0x56>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8002a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a66:	4413      	add	r3, r2
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
      pInA = pInA + 2 * numColsA;
 8002a6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a72:	4413      	add	r3, r2
 8002a74:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Decrement row loop counter */
      row--;
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30

    } while (row > 0U);
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f47f af74 	bne.w	800296c <arm_mat_cmplx_mult_f32+0x3e>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Return to application */
  return (status);
 8002a8a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	375c      	adds	r7, #92	; 0x5c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	817b      	strh	r3, [r7, #10]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	897a      	ldrh	r2, [r7, #10]
 8002ab0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	893a      	ldrh	r2, [r7, #8]
 8002ab6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	605a      	str	r2, [r3, #4]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <arm_mat_inverse_f32>:
}
#else
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b09b      	sub	sp, #108	; 0x6c
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	623b      	str	r3, [r7, #32]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	885b      	ldrh	r3, [r3, #2]
 8002aea:	61fb      	str	r3, [r7, #28]

#if defined (ARM_MATH_DSP)

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8002af2:	2300      	movs	r3, #0
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	643b      	str	r3, [r7, #64]	; 0x40

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8002afe:	e029      	b.n	8002b54 <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8002b00:	6a3a      	ldr	r2, [r7, #32]
 8002b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
      while (j > 0U)
 8002b08:	e008      	b.n	8002b1c <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8002b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b0c:	1d1a      	adds	r2, r3, #4
 8002b0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
        j--;
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38
      while (j > 0U)
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f3      	bne.n	8002b0a <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8002b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b24:	1d1a      	adds	r2, r3, #4
 8002b26:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b30:	3b01      	subs	r3, #1
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
      while (j > 0U)
 8002b34:	e008      	b.n	8002b48 <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 8002b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
        j--;
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	3b01      	subs	r3, #1
 8002b46:	63bb      	str	r3, [r7, #56]	; 0x38
      while (j > 0U)
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f3      	bne.n	8002b36 <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement loop counter */
      rowCnt--;
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b50:	3b01      	subs	r3, #1
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
    while (rowCnt > 0U)
 8002b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1d2      	bne.n	8002b00 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Index modifier to navigate through the columns */
    l = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (loopCnt > 0U)
 8002b62:	e13f      	b.n	8002de4 <arm_mat_inverse_f32+0x31a>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b70:	4413      	add	r3, r2
 8002b72:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b80:	4413      	add	r3, r2
 8002b82:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 8002b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48

      
      /* Destination pointer modifier */
      k = 1U;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Check if the pivot element is zero */
      if (*pInT1 == 0.0f)
 8002b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	d158      	bne.n	8002c50 <arm_mat_inverse_f32+0x186>
      {
        /* Loop over the number rows present below */

        for (i = (l + 1U); i < numRows; i++)
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba4:	e050      	b.n	8002c48 <arm_mat_inverse_f32+0x17e>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * i);
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bb2:	4413      	add	r3, r2
 8002bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bc2:	4413      	add	r3, r2
 8002bc4:	657b      	str	r3, [r7, #84]	; 0x54

          /* Check if there is a non zero pivot element to
           * replace in the rows below */
          if (*pInT2 != 0.0f)
 8002bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	d032      	beq.n	8002c3c <arm_mat_inverse_f32+0x172>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38

            while (j > 0U)
 8002bde:	e010      	b.n	8002c02 <arm_mat_inverse_f32+0x138>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 8002be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61bb      	str	r3, [r7, #24]
              *pInT2++ = *pInT1;
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	1d1a      	adds	r2, r3, #4
 8002bea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8002bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf4:	1d1a      	adds	r2, r3, #4
 8002bf6:	663a      	str	r2, [r7, #96]	; 0x60
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
            while (j > 0U)
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1eb      	bne.n	8002be0 <arm_mat_inverse_f32+0x116>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38

            while (j > 0U)
 8002c0c:	e010      	b.n	8002c30 <arm_mat_inverse_f32+0x166>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	61bb      	str	r3, [r7, #24]
              *pOutT2++ = *pOutT1;
 8002c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	657a      	str	r2, [r7, #84]	; 0x54
 8002c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 8002c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c22:	1d1a      	adds	r2, r3, #4
 8002c24:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	601a      	str	r2, [r3, #0]

              /* Decrement loop counter */
              j--;
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
            while (j > 0U)
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1eb      	bne.n	8002c0e <arm_mat_inverse_f32+0x144>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8002c36:	2301      	movs	r3, #1
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Break after exchange is done */
            break;
 8002c3a:	e009      	b.n	8002c50 <arm_mat_inverse_f32+0x186>
          }

          /* Update the destination pointer modifier */
          k++;
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	3301      	adds	r3, #1
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
        for (i = (l + 1U); i < numRows; i++)
 8002c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c44:	3301      	adds	r3, #1
 8002c46:	647b      	str	r3, [r7, #68]	; 0x44
 8002c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d3aa      	bcc.n	8002ba6 <arm_mat_inverse_f32+0xdc>
          /* Decrement loop counter */
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d009      	beq.n	8002c6a <arm_mat_inverse_f32+0x1a0>
 8002c56:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002c5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	d102      	bne.n	8002c6a <arm_mat_inverse_f32+0x1a0>
      {
        return ARM_MATH_SINGULAR;
 8002c64:	f06f 0304 	mvn.w	r3, #4
 8002c68:	e0f6      	b.n	8002e58 <arm_mat_inverse_f32+0x38e>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c76:	4413      	add	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
      pPivotRowDst = pOut + (l * numCols);
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	4413      	add	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38

      while (j > 0U)
 8002ca0:	e010      	b.n	8002cc4 <arm_mat_inverse_f32+0x1fa>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 8002ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]
        *pInT1++ = in1 / in;
 8002ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002caa:	1d1a      	adds	r2, r3, #4
 8002cac:	663a      	str	r2, [r7, #96]	; 0x60
 8002cae:	edd7 6a03 	vldr	s13, [r7, #12]
 8002cb2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cba:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
      while (j > 0U)
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1eb      	bne.n	8002ca2 <arm_mat_inverse_f32+0x1d8>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38

      while (j > 0U)
 8002cce:	e010      	b.n	8002cf2 <arm_mat_inverse_f32+0x228>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8002cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
        *pInT2++ = in1 / in;
 8002cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd8:	1d1a      	adds	r2, r3, #4
 8002cda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002cdc:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ce0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce8:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      while (j > 0U)
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1eb      	bne.n	8002cd0 <arm_mat_inverse_f32+0x206>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8002cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfa:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30

      while (k > 0U)
 8002d08:	e060      	b.n	8002dcc <arm_mat_inverse_f32+0x302>
      {
        /* Check for the pivot element */
        if (i == l)
 8002d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d10c      	bne.n	8002d2c <arm_mat_inverse_f32+0x262>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d1c:	4413      	add	r3, r2
 8002d1e:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d26:	4413      	add	r3, r2
 8002d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2a:	e044      	b.n	8002db6 <arm_mat_inverse_f32+0x2ec>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8002d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38

          while (j > 0U)
 8002d42:	e017      	b.n	8002d74 <arm_mat_inverse_f32+0x2aa>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8002d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8002d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4c:	1d1a      	adds	r2, r3, #4
 8002d4e:	653a      	str	r2, [r7, #80]	; 0x50
 8002d50:	ed93 7a00 	vldr	s14, [r3]
 8002d54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d5e:	1d1a      	adds	r2, r3, #4
 8002d60:	663a      	str	r2, [r7, #96]	; 0x60
 8002d62:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6a:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	3b01      	subs	r3, #1
 8002d72:	63bb      	str	r3, [r7, #56]	; 0x38
          while (j > 0U)
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1e4      	bne.n	8002d44 <arm_mat_inverse_f32+0x27a>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38

          while (j > 0U)
 8002d7e:	e017      	b.n	8002db0 <arm_mat_inverse_f32+0x2e6>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8002d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	1d1a      	adds	r2, r3, #4
 8002d8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d8c:	ed93 7a00 	vldr	s14, [r3]
 8002d90:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9a:	1d1a      	adds	r2, r3, #4
 8002d9c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement loop counter */
            j--;
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	3b01      	subs	r3, #1
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38
          while (j > 0U)
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e4      	bne.n	8002d80 <arm_mat_inverse_f32+0x2b6>
          }

        }

        /* Increment temporary input pointer */
        pInT1 = pInT1 + l;
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dbc:	4413      	add	r3, r2
 8002dbe:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement loop counter */
        k--;
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment pivot index */
        i++;
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc8:	3301      	adds	r3, #1
 8002dca:	647b      	str	r3, [r7, #68]	; 0x44
      while (k > 0U)
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d19b      	bne.n	8002d0a <arm_mat_inverse_f32+0x240>
      }

      /* Increment the input pointer */
      pIn++;
 8002dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Increment the index modifier */
      l++;
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	3301      	adds	r3, #1
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (loopCnt > 0U)
 8002de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f47f aebc 	bne.w	8002b64 <arm_mat_inverse_f32+0x9a>
    }

#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if ((flag != 1U) && (in == 0.0f))
 8002df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d02d      	beq.n	8002e54 <arm_mat_inverse_f32+0x38a>
 8002df8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002dfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e04:	d126      	bne.n	8002e54 <arm_mat_inverse_f32+0x38a>
    {
      pIn = pSrc->pData;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e10:	e00d      	b.n	8002e2e <arm_mat_inverse_f32+0x364>
      {
        if (pIn[i] != 0.0f)
 8002e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e18:	4413      	add	r3, r2
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	d10a      	bne.n	8002e3e <arm_mat_inverse_f32+0x374>
      for (i = 0; i < numRows * numCols; i++)
 8002e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d3ea      	bcc.n	8002e12 <arm_mat_inverse_f32+0x348>
 8002e3c:	e000      	b.n	8002e40 <arm_mat_inverse_f32+0x376>
            break;
 8002e3e:	bf00      	nop
      }

      if (i == numRows * numCols)
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d102      	bne.n	8002e54 <arm_mat_inverse_f32+0x38a>
        status = ARM_MATH_SINGULAR;
 8002e4e:	23fb      	movs	r3, #251	; 0xfb
 8002e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Return to application */
  return (status);
 8002e54:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	376c      	adds	r7, #108	; 0x6c
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b095      	sub	sp, #84	; 0x54
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8002e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8002e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8002e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8002e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea0:	1d1a      	adds	r2, r3, #4
 8002ea2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8002ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eaa:	1d1a      	adds	r2, r3, #4
 8002eac:	64ba      	str	r2, [r7, #72]	; 0x48
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8002eb2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002eb6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ebe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8002ec2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002ec6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ece:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8002ed2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ed6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1d1a      	adds	r2, r3, #4
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eec:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8002ef0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ef4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1d1a      	adds	r2, r3, #4
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4413      	add	r3, r2
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8002f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8002f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8002f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8002f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8002f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8002f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f38:	1d1a      	adds	r2, r3, #4
 8002f3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8002f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f42:	1d1a      	adds	r2, r3, #4
 8002f44:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8002f4a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8002f5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f5e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f66:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8002f6a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002f6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f76:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8002f7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8002f8a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002f8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8002f9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002faa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002fae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1d1a      	adds	r2, r3, #4
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002fd8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002fdc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002fe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fe4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1d1a      	adds	r2, r3, #4
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003002:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8003006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003008:	3308      	adds	r3, #8
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800300c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300e:	3b08      	subs	r3, #8
 8003010:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8003012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003014:	3b01      	subs	r3, #1
 8003016:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 8003018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301a:	2b00      	cmp	r3, #0
 800301c:	f47f af7f 	bne.w	8002f1e <stage_rfft_f32+0xba>
}
 8003020:	bf00      	nop
 8003022:	3754      	adds	r7, #84	; 0x54
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800302c:	b480      	push	{r7}
 800302e:	b095      	sub	sp, #84	; 0x54
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800304e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8003054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800305a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305c:	3308      	adds	r3, #8
 800305e:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8003060:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003064:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1d1a      	adds	r2, r3, #4
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800307a:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800307e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003082:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	1d1a      	adds	r2, r3, #4
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003098:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4413      	add	r3, r2
 80030a4:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80030a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a8:	3308      	adds	r3, #8
 80030aa:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 80030ac:	e07c      	b.n	80031a8 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80030ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80030b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80030ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80030c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80030c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80030d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80030da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80030e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80030ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80030ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80030f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f6:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80030fa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80030fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800310a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800310e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800311a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800311e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003126:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800312a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800312e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800313a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800313e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003142:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003146:	edd7 7a07 	vldr	s15, [r7, #28]
 800314a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800314e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1d1a      	adds	r2, r3, #4
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003164:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003168:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800316c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003174:	edd7 7a05 	vldr	s15, [r7, #20]
 8003178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1d1a      	adds	r2, r3, #4
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800318e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003192:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8003196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003198:	3308      	adds	r3, #8
 800319a:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	3b08      	subs	r3, #8
 80031a0:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80031a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a4:	3b01      	subs	r3, #1
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 80031a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f47f af7f 	bne.w	80030ae <merge_rfft_f32+0x82>
   }

}
 80031b0:	bf00      	nop
 80031b2:	3754      	adds	r7, #84	; 0x54
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff ff27 	bl	800302c <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	2301      	movs	r3, #1
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	6978      	ldr	r0, [r7, #20]
 80031e6:	f7fe fa0c 	bl	8001602 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80031ea:	e00a      	b.n	8003202 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	2301      	movs	r3, #1
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7fe fa05 	bl	8001602 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff fe31 	bl	8002e64 <stage_rfft_f32>
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <arm_rfft_32_fast_init_f32+0x14>
 800321a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800321e:	e014      	b.n	800324a <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2110      	movs	r1, #16
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fa8f 	bl	8001748 <arm_cfft_init_f32>
 800322a:	4603      	mov	r3, r0
 800322c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800322e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 8003236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323a:	e006      	b.n	800324a <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a03      	ldr	r2, [pc, #12]	; (8003254 <arm_rfft_32_fast_init_f32+0x48>)
 8003246:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	0801cc9c 	.word	0x0801cc9c

08003258 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <arm_rfft_64_fast_init_f32+0x14>
 8003266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800326a:	e014      	b.n	8003296 <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2120      	movs	r1, #32
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fa69 	bl	8001748 <arm_cfft_init_f32>
 8003276:	4603      	mov	r3, r0
 8003278:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	e006      	b.n	8003296 <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2240      	movs	r2, #64	; 0x40
 800328c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a03      	ldr	r2, [pc, #12]	; (80032a0 <arm_rfft_64_fast_init_f32+0x48>)
 8003292:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	0801cd1c 	.word	0x0801cd1c

080032a4 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <arm_rfft_128_fast_init_f32+0x14>
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032b6:	e014      	b.n	80032e2 <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2140      	movs	r1, #64	; 0x40
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fa43 	bl	8001748 <arm_cfft_init_f32>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	e006      	b.n	80032e2 <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a03      	ldr	r2, [pc, #12]	; (80032ec <arm_rfft_128_fast_init_f32+0x48>)
 80032de:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	0801ce1c 	.word	0x0801ce1c

080032f0 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <arm_rfft_256_fast_init_f32+0x14>
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003302:	e015      	b.n	8003330 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2180      	movs	r1, #128	; 0x80
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fa1d 	bl	8001748 <arm_cfft_init_f32>
 800330e:	4603      	mov	r3, r0
 8003310:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 800331a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331e:	e007      	b.n	8003330 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a03      	ldr	r2, [pc, #12]	; (8003338 <arm_rfft_256_fast_init_f32+0x48>)
 800332c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	0801d01c 	.word	0x0801d01c

0800333c <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <arm_rfft_512_fast_init_f32+0x14>
 800334a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800334e:	e016      	b.n	800337e <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe f9f6 	bl	8001748 <arm_cfft_init_f32>
 800335c:	4603      	mov	r3, r0
 800335e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336c:	e007      	b.n	800337e <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003374:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a03      	ldr	r2, [pc, #12]	; (8003388 <arm_rfft_512_fast_init_f32+0x4c>)
 800337a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	0801d41c 	.word	0x0801d41c

0800338c <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <arm_rfft_1024_fast_init_f32+0x14>
 800339a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800339e:	e016      	b.n	80033ce <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe f9ce 	bl	8001748 <arm_cfft_init_f32>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80033b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 80033b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033bc:	e007      	b.n	80033ce <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a03      	ldr	r2, [pc, #12]	; (80033d8 <arm_rfft_1024_fast_init_f32+0x4c>)
 80033ca:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	0801dc1c 	.word	0x0801dc1c

080033dc <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <arm_rfft_2048_fast_init_f32+0x14>
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ee:	e016      	b.n	800341e <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe f9a6 	bl	8001748 <arm_cfft_init_f32>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 8003408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340c:	e007      	b.n	800341e <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003414:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a03      	ldr	r2, [pc, #12]	; (8003428 <arm_rfft_2048_fast_init_f32+0x4c>)
 800341a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	0801ec1c 	.word	0x0801ec1c

0800342c <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <arm_rfft_4096_fast_init_f32+0x14>
 800343a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800343e:	e016      	b.n	800346e <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe f97e 	bl	8001748 <arm_cfft_init_f32>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 8003458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345c:	e007      	b.n	800346e <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003464:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a03      	ldr	r2, [pc, #12]	; (8003478 <arm_rfft_4096_fast_init_f32+0x4c>)
 800346a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	08020c1c 	.word	0x08020c1c

0800347c <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003492:	d025      	beq.n	80034e0 <arm_rfft_fast_init_f32+0x64>
 8003494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003498:	dc06      	bgt.n	80034a8 <arm_rfft_fast_init_f32+0x2c>
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d026      	beq.n	80034ec <arm_rfft_fast_init_f32+0x70>
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d021      	beq.n	80034e6 <arm_rfft_fast_init_f32+0x6a>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d025      	beq.n	80034f2 <arm_rfft_fast_init_f32+0x76>
 80034a6:	e027      	b.n	80034f8 <arm_rfft_fast_init_f32+0x7c>
 80034a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ac:	d012      	beq.n	80034d4 <arm_rfft_fast_init_f32+0x58>
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	dc03      	bgt.n	80034bc <arm_rfft_fast_init_f32+0x40>
 80034b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b8:	d00f      	beq.n	80034da <arm_rfft_fast_init_f32+0x5e>
 80034ba:	e01d      	b.n	80034f8 <arm_rfft_fast_init_f32+0x7c>
 80034bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c0:	d005      	beq.n	80034ce <arm_rfft_fast_init_f32+0x52>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d117      	bne.n	80034f8 <arm_rfft_fast_init_f32+0x7c>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <arm_rfft_fast_init_f32+0xa0>)
 80034ca:	60fb      	str	r3, [r7, #12]
    break;
 80034cc:	e017      	b.n	80034fe <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <arm_rfft_fast_init_f32+0xa4>)
 80034d0:	60fb      	str	r3, [r7, #12]
    break;
 80034d2:	e014      	b.n	80034fe <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <arm_rfft_fast_init_f32+0xa8>)
 80034d6:	60fb      	str	r3, [r7, #12]
    break;
 80034d8:	e011      	b.n	80034fe <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <arm_rfft_fast_init_f32+0xac>)
 80034dc:	60fb      	str	r3, [r7, #12]
    break;
 80034de:	e00e      	b.n	80034fe <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <arm_rfft_fast_init_f32+0xb0>)
 80034e2:	60fb      	str	r3, [r7, #12]
    break;
 80034e4:	e00b      	b.n	80034fe <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <arm_rfft_fast_init_f32+0xb4>)
 80034e8:	60fb      	str	r3, [r7, #12]
    break;
 80034ea:	e008      	b.n	80034fe <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <arm_rfft_fast_init_f32+0xb8>)
 80034ee:	60fb      	str	r3, [r7, #12]
    break;
 80034f0:	e005      	b.n	80034fe <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <arm_rfft_fast_init_f32+0xbc>)
 80034f4:	60fb      	str	r3, [r7, #12]
    break;
 80034f6:	e002      	b.n	80034fe <arm_rfft_fast_init_f32+0x82>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034fc:	e009      	b.n	8003512 <arm_rfft_fast_init_f32+0x96>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <arm_rfft_fast_init_f32+0x8e>
 8003504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003508:	e003      	b.n	8003512 <arm_rfft_fast_init_f32+0x96>
  return fptr( S );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
 8003510:	4603      	mov	r3, r0

}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	0800342d 	.word	0x0800342d
 8003520:	080033dd 	.word	0x080033dd
 8003524:	0800338d 	.word	0x0800338d
 8003528:	0800333d 	.word	0x0800333d
 800352c:	080032f1 	.word	0x080032f1
 8003530:	080032a5 	.word	0x080032a5
 8003534:	08003259 	.word	0x08003259
 8003538:	0800320d 	.word	0x0800320d

0800353c <HAL_I2S_RxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
		Process(dma_2, left_2, right_2, HALF_BUFFER_SIZE);
	} else {
		Process(dma_3, left_3, right_3, HALF_BUFFER_SIZE);
	}
#endif
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
		Process(&dma_2[HALF_BUFFER_SIZE], left_2, right_2, HALF_BUFFER_SIZE);
	} else {
		Process(&dma_3[HALF_BUFFER_SIZE], left_3, right_3, HALF_BUFFER_SIZE);
	}
#endif
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800357e:	f000 fe83 	bl	8004288 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003582:	f000 f9d7 	bl	8003934 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003586:	f000 fb67 	bl	8003c58 <MX_GPIO_Init>
	MX_DMA_Init();
 800358a:	f000 fb3d 	bl	8003c08 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800358e:	f000 fb11 	bl	8003bb4 <MX_USART2_UART_Init>
	MX_I2S2_Init();
 8003592:	f000 fa67 	bl	8003a64 <MX_I2S2_Init>
	MX_I2S3_Init();
 8003596:	f000 fa93 	bl	8003ac0 <MX_I2S3_Init>
	MX_TIM2_Init();
 800359a:	f000 fabf 	bl	8003b1c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(VCC_1_GPIO_Port, VCC_1_Pin, GPIO_PIN_SET);
 800359e:	2201      	movs	r2, #1
 80035a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035a4:	486d      	ldr	r0, [pc, #436]	; (800375c <main+0x1e4>)
 80035a6:	f001 fcf3 	bl	8004f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VCC_2_GPIO_Port, VCC_2_Pin, GPIO_PIN_SET);
 80035aa:	2201      	movs	r2, #1
 80035ac:	2140      	movs	r1, #64	; 0x40
 80035ae:	486b      	ldr	r0, [pc, #428]	; (800375c <main+0x1e4>)
 80035b0:	f001 fcee 	bl	8004f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VCC_3_GPIO_Port, VCC_3_Pin, GPIO_PIN_SET);
 80035b4:	2201      	movs	r2, #1
 80035b6:	2120      	movs	r1, #32
 80035b8:	4868      	ldr	r0, [pc, #416]	; (800375c <main+0x1e4>)
 80035ba:	f001 fce9 	bl	8004f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VCC_4_GPIO_Port, VCC_4_Pin, GPIO_PIN_SET);
 80035be:	2201      	movs	r2, #1
 80035c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035c4:	4866      	ldr	r0, [pc, #408]	; (8003760 <main+0x1e8>)
 80035c6:	f001 fce3 	bl	8004f90 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GND_1_GPIO_Port, GND_1_Pin, GPIO_PIN_RESET);
 80035ca:	2200      	movs	r2, #0
 80035cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035d0:	4862      	ldr	r0, [pc, #392]	; (800375c <main+0x1e4>)
 80035d2:	f001 fcdd 	bl	8004f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GND_2_GPIO_Port, GND_2_Pin, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035dc:	4861      	ldr	r0, [pc, #388]	; (8003764 <main+0x1ec>)
 80035de:	f001 fcd7 	bl	8004f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GND_3_GPIO_Port, GND_3_Pin, GPIO_PIN_RESET);
 80035e2:	2200      	movs	r2, #0
 80035e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035e8:	485e      	ldr	r0, [pc, #376]	; (8003764 <main+0x1ec>)
 80035ea:	f001 fcd1 	bl	8004f90 <HAL_GPIO_WritePin>

	// Start DMAs
	HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*) dma_2, FULL_BUFFER_SIZE);
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	495d      	ldr	r1, [pc, #372]	; (8003768 <main+0x1f0>)
 80035f2:	485e      	ldr	r0, [pc, #376]	; (800376c <main+0x1f4>)
 80035f4:	f001 fdde 	bl	80051b4 <HAL_I2S_Receive_DMA>
	HAL_I2S_Receive_DMA(&hi2s3, (uint16_t*) dma_3, FULL_BUFFER_SIZE);
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	495d      	ldr	r1, [pc, #372]	; (8003770 <main+0x1f8>)
 80035fc:	485d      	ldr	r0, [pc, #372]	; (8003774 <main+0x1fc>)
 80035fe:	f001 fdd9 	bl	80051b4 <HAL_I2S_Receive_DMA>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

#if USE_TEST_SIGNALS
		for (uint16_t i = 0; i < N_ACTUAL_SAMPLES; i++) {
 8003602:	2300      	movs	r3, #0
 8003604:	80fb      	strh	r3, [r7, #6]
 8003606:	e02a      	b.n	800365e <main+0xe6>
			left_2[i] = mic0[i];
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	495a      	ldr	r1, [pc, #360]	; (8003778 <main+0x200>)
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	440a      	add	r2, r1
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	4959      	ldr	r1, [pc, #356]	; (800377c <main+0x204>)
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	601a      	str	r2, [r3, #0]
			left_3[i] = mic1[i];
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	4957      	ldr	r1, [pc, #348]	; (8003780 <main+0x208>)
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	440a      	add	r2, r1
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4956      	ldr	r1, [pc, #344]	; (8003784 <main+0x20c>)
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	601a      	str	r2, [r3, #0]
			right_2[i] = mic2[i];
 8003630:	88fa      	ldrh	r2, [r7, #6]
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	4954      	ldr	r1, [pc, #336]	; (8003788 <main+0x210>)
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	440a      	add	r2, r1
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	4953      	ldr	r1, [pc, #332]	; (800378c <main+0x214>)
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	601a      	str	r2, [r3, #0]
			right_3[i] = mic3[i];
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	4951      	ldr	r1, [pc, #324]	; (8003790 <main+0x218>)
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	440a      	add	r2, r1
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	4950      	ldr	r1, [pc, #320]	; (8003794 <main+0x21c>)
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	601a      	str	r2, [r3, #0]
		for (uint16_t i = 0; i < N_ACTUAL_SAMPLES; i++) {
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	3301      	adds	r3, #1
 800365c:	80fb      	strh	r3, [r7, #6]
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	2b1f      	cmp	r3, #31
 8003662:	d9d1      	bls.n	8003608 <main+0x90>
		}
#endif

		//HAL_Delay(100);
		processing = 1;
 8003664:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <main+0x220>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
		STOPCHRONO;
 800366a:	4b4c      	ldr	r3, [pc, #304]	; (800379c <main+0x224>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	461a      	mov	r2, r3
 8003672:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <main+0x228>)
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	4849      	ldr	r0, [pc, #292]	; (800379c <main+0x224>)
 8003678:	f003 fa49 	bl	8006b0e <HAL_TIM_Base_Stop>
 800367c:	4847      	ldr	r0, [pc, #284]	; (800379c <main+0x224>)
 800367e:	f003 f9f7 	bl	8006a70 <HAL_TIM_Base_Init>
 8003682:	4846      	ldr	r0, [pc, #280]	; (800379c <main+0x224>)
 8003684:	f003 fa1f 	bl	8006ac6 <HAL_TIM_Base_Start>
		/* Process the data through the CFFT/CIFFT module */

		arm_rfft_fast_init_f32(&S, FFTSIZE);
 8003688:	2120      	movs	r1, #32
 800368a:	4846      	ldr	r0, [pc, #280]	; (80037a4 <main+0x22c>)
 800368c:	f7ff fef6 	bl	800347c <arm_rfft_fast_init_f32>
		arm_rfft_fast_f32(&S, left_2, left_2_f, ifftFlag);
 8003690:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <main+0x230>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4a45      	ldr	r2, [pc, #276]	; (80037ac <main+0x234>)
 8003698:	4938      	ldr	r1, [pc, #224]	; (800377c <main+0x204>)
 800369a:	4842      	ldr	r0, [pc, #264]	; (80037a4 <main+0x22c>)
 800369c:	f7ff fd8e 	bl	80031bc <arm_rfft_fast_f32>
		arm_rfft_fast_init_f32(&S, FFTSIZE);
 80036a0:	2120      	movs	r1, #32
 80036a2:	4840      	ldr	r0, [pc, #256]	; (80037a4 <main+0x22c>)
 80036a4:	f7ff feea 	bl	800347c <arm_rfft_fast_init_f32>
		arm_rfft_fast_f32(&S, left_3, left_3_f, ifftFlag);
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <main+0x230>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <main+0x238>)
 80036b0:	4934      	ldr	r1, [pc, #208]	; (8003784 <main+0x20c>)
 80036b2:	483c      	ldr	r0, [pc, #240]	; (80037a4 <main+0x22c>)
 80036b4:	f7ff fd82 	bl	80031bc <arm_rfft_fast_f32>
		arm_rfft_fast_init_f32(&S, FFTSIZE);
 80036b8:	2120      	movs	r1, #32
 80036ba:	483a      	ldr	r0, [pc, #232]	; (80037a4 <main+0x22c>)
 80036bc:	f7ff fede 	bl	800347c <arm_rfft_fast_init_f32>
		arm_rfft_fast_f32(&S, right_2, right_2_f, ifftFlag);
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <main+0x230>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <main+0x23c>)
 80036c8:	4930      	ldr	r1, [pc, #192]	; (800378c <main+0x214>)
 80036ca:	4836      	ldr	r0, [pc, #216]	; (80037a4 <main+0x22c>)
 80036cc:	f7ff fd76 	bl	80031bc <arm_rfft_fast_f32>
		arm_rfft_fast_init_f32(&S, FFTSIZE);
 80036d0:	2120      	movs	r1, #32
 80036d2:	4834      	ldr	r0, [pc, #208]	; (80037a4 <main+0x22c>)
 80036d4:	f7ff fed2 	bl	800347c <arm_rfft_fast_init_f32>
		arm_rfft_fast_f32(&S, right_3, right_3_f, ifftFlag);
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <main+0x230>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	4a36      	ldr	r2, [pc, #216]	; (80037b8 <main+0x240>)
 80036e0:	492c      	ldr	r1, [pc, #176]	; (8003794 <main+0x21c>)
 80036e2:	4830      	ldr	r0, [pc, #192]	; (80037a4 <main+0x22c>)
 80036e4:	f7ff fd6a 	bl	80031bc <arm_rfft_fast_f32>

		STOPCHRONO;
 80036e8:	4b2c      	ldr	r3, [pc, #176]	; (800379c <main+0x224>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <main+0x228>)
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	4829      	ldr	r0, [pc, #164]	; (800379c <main+0x224>)
 80036f6:	f003 fa0a 	bl	8006b0e <HAL_TIM_Base_Stop>
 80036fa:	4828      	ldr	r0, [pc, #160]	; (800379c <main+0x224>)
 80036fc:	f003 f9b8 	bl	8006a70 <HAL_TIM_Base_Init>
 8003700:	4826      	ldr	r0, [pc, #152]	; (800379c <main+0x224>)
 8003702:	f003 f9e0 	bl	8006ac6 <HAL_TIM_Base_Start>

		time_fft = time_us;
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <main+0x228>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <main+0x244>)
 800370e:	601a      	str	r2, [r3, #0]

		// Matrix initialisation

		srcRows = nMic * 2;
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <main+0x248>)
 8003712:	2208      	movs	r2, #8
 8003714:	701a      	strb	r2, [r3, #0]
		srcColumns = 1;
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <main+0x24c>)
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
		arm_mat_init_f32(&matXf, srcRows, srcColumns, vect_Xf);
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <main+0x248>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	b299      	uxth	r1, r3
 8003722:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <main+0x24c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <main+0x250>)
 800372a:	4828      	ldr	r0, [pc, #160]	; (80037cc <main+0x254>)
 800372c:	f7ff f9b5 	bl	8002a9a <arm_mat_init_f32>

		srcRows = 1;
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <main+0x248>)
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
		srcColumns = nMic * 2;
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <main+0x24c>)
 8003738:	2208      	movs	r2, #8
 800373a:	701a      	strb	r2, [r3, #0]
		arm_mat_init_f32(&matXfh, srcRows, srcColumns, vect_Xfh);
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <main+0x248>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b299      	uxth	r1, r3
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <main+0x24c>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b29a      	uxth	r2, r3
 8003748:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <main+0x258>)
 800374a:	4822      	ldr	r0, [pc, #136]	; (80037d4 <main+0x25c>)
 800374c:	f7ff f9a5 	bl	8002a9a <arm_mat_init_f32>

		uint16_t f = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	80bb      	strh	r3, [r7, #4]

		// Frequency bin processing
		for (f = 0; f < FFTSIZE; f += 2) {
 8003754:	2300      	movs	r3, #0
 8003756:	80bb      	strh	r3, [r7, #4]
 8003758:	e0b1      	b.n	80038be <main+0x346>
 800375a:	bf00      	nop
 800375c:	40020800 	.word	0x40020800
 8003760:	40020000 	.word	0x40020000
 8003764:	40020400 	.word	0x40020400
 8003768:	20001540 	.word	0x20001540
 800376c:	20001b4c 	.word	0x20001b4c
 8003770:	20000230 	.word	0x20000230
 8003774:	20001b94 	.word	0x20001b94
 8003778:	20000000 	.word	0x20000000
 800377c:	20001c00 	.word	0x20001c00
 8003780:	20000080 	.word	0x20000080
 8003784:	2000143c 	.word	0x2000143c
 8003788:	20000100 	.word	0x20000100
 800378c:	200017c4 	.word	0x200017c4
 8003790:	20000180 	.word	0x20000180
 8003794:	20001644 	.word	0x20001644
 8003798:	2000022c 	.word	0x2000022c
 800379c:	2000184c 	.word	0x2000184c
 80037a0:	20001640 	.word	0x20001640
 80037a4:	20001424 	.word	0x20001424
 80037a8:	20000228 	.word	0x20000228
 80037ac:	200014bc 	.word	0x200014bc
 80037b0:	20001a6c 	.word	0x20001a6c
 80037b4:	200013a0 	.word	0x200013a0
 80037b8:	200018ec 	.word	0x200018ec
 80037bc:	20001398 	.word	0x20001398
 80037c0:	2000153c 	.word	0x2000153c
 80037c4:	2000139c 	.word	0x2000139c
 80037c8:	20001be0 	.word	0x20001be0
 80037cc:	20001844 	.word	0x20001844
 80037d0:	2000188c 	.word	0x2000188c
 80037d4:	20000330 	.word	0x20000330
			vect_Xf[0] = left_2_f[f];
 80037d8:	88bb      	ldrh	r3, [r7, #4]
 80037da:	4a45      	ldr	r2, [pc, #276]	; (80038f0 <main+0x378>)
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a44      	ldr	r2, [pc, #272]	; (80038f4 <main+0x37c>)
 80037e4:	6013      	str	r3, [r2, #0]
			vect_Xf[1] = left_2_f[f + 1];
 80037e6:	88bb      	ldrh	r3, [r7, #4]
 80037e8:	3301      	adds	r3, #1
 80037ea:	4a41      	ldr	r2, [pc, #260]	; (80038f0 <main+0x378>)
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a40      	ldr	r2, [pc, #256]	; (80038f4 <main+0x37c>)
 80037f4:	6053      	str	r3, [r2, #4]
			vect_Xf[2] = left_3_f[f];
 80037f6:	88bb      	ldrh	r3, [r7, #4]
 80037f8:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <main+0x380>)
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3c      	ldr	r2, [pc, #240]	; (80038f4 <main+0x37c>)
 8003802:	6093      	str	r3, [r2, #8]
			vect_Xf[3] = left_3_f[f + 1];
 8003804:	88bb      	ldrh	r3, [r7, #4]
 8003806:	3301      	adds	r3, #1
 8003808:	4a3b      	ldr	r2, [pc, #236]	; (80038f8 <main+0x380>)
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a38      	ldr	r2, [pc, #224]	; (80038f4 <main+0x37c>)
 8003812:	60d3      	str	r3, [r2, #12]
			vect_Xf[4] = right_2_f[f];
 8003814:	88bb      	ldrh	r3, [r7, #4]
 8003816:	4a39      	ldr	r2, [pc, #228]	; (80038fc <main+0x384>)
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a35      	ldr	r2, [pc, #212]	; (80038f4 <main+0x37c>)
 8003820:	6113      	str	r3, [r2, #16]
			vect_Xf[5] = right_2_f[f + 1];
 8003822:	88bb      	ldrh	r3, [r7, #4]
 8003824:	3301      	adds	r3, #1
 8003826:	4a35      	ldr	r2, [pc, #212]	; (80038fc <main+0x384>)
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <main+0x37c>)
 8003830:	6153      	str	r3, [r2, #20]
			vect_Xf[6] = right_3_f[f];
 8003832:	88bb      	ldrh	r3, [r7, #4]
 8003834:	4a32      	ldr	r2, [pc, #200]	; (8003900 <main+0x388>)
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <main+0x37c>)
 800383e:	6193      	str	r3, [r2, #24]
			vect_Xf[7] = right_3_f[f + 1];
 8003840:	88bb      	ldrh	r3, [r7, #4]
 8003842:	3301      	adds	r3, #1
 8003844:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <main+0x388>)
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <main+0x37c>)
 800384e:	61d3      	str	r3, [r2, #28]

			arm_cmplx_conj_f32(vect_Xf, vect_Xfh, nMic);
 8003850:	2204      	movs	r2, #4
 8003852:	492c      	ldr	r1, [pc, #176]	; (8003904 <main+0x38c>)
 8003854:	4827      	ldr	r0, [pc, #156]	; (80038f4 <main+0x37c>)
 8003856:	f7ff f841 	bl	80028dc <arm_cmplx_conj_f32>

			srcRows = nMic;
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <main+0x390>)
 800385c:	2204      	movs	r2, #4
 800385e:	701a      	strb	r2, [r3, #0]
			srcColumns = nMic * 2;
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <main+0x394>)
 8003862:	2208      	movs	r2, #8
 8003864:	701a      	strb	r2, [r3, #0]
			arm_mat_init_f32(&matR[f], srcRows, srcColumns, vect_R[f]);
 8003866:	88bb      	ldrh	r3, [r7, #4]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4a29      	ldr	r2, [pc, #164]	; (8003910 <main+0x398>)
 800386c:	1898      	adds	r0, r3, r2
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <main+0x390>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b299      	uxth	r1, r3
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <main+0x394>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b29c      	uxth	r4, r3
 800387a:	88bb      	ldrh	r3, [r7, #4]
 800387c:	01db      	lsls	r3, r3, #7
 800387e:	4a25      	ldr	r2, [pc, #148]	; (8003914 <main+0x39c>)
 8003880:	4413      	add	r3, r2
 8003882:	4622      	mov	r2, r4
 8003884:	f7ff f909 	bl	8002a9a <arm_mat_init_f32>

			status = arm_mat_cmplx_mult_f32(&matXf, &matXfh, &matR[f]);
 8003888:	88bb      	ldrh	r3, [r7, #4]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4a20      	ldr	r2, [pc, #128]	; (8003910 <main+0x398>)
 800388e:	4413      	add	r3, r2
 8003890:	461a      	mov	r2, r3
 8003892:	4921      	ldr	r1, [pc, #132]	; (8003918 <main+0x3a0>)
 8003894:	4821      	ldr	r0, [pc, #132]	; (800391c <main+0x3a4>)
 8003896:	f7ff f84a 	bl	800292e <arm_mat_cmplx_mult_f32>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <main+0x3a8>)
 80038a0:	701a      	strb	r2, [r3, #0]

			arm_mat_inverse_f32(&matR[f], &matRinv[f]);
 80038a2:	88bb      	ldrh	r3, [r7, #4]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <main+0x398>)
 80038a8:	1898      	adds	r0, r3, r2
 80038aa:	88bb      	ldrh	r3, [r7, #4]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <main+0x3ac>)
 80038b0:	4413      	add	r3, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	f7ff f909 	bl	8002aca <arm_mat_inverse_f32>
		for (f = 0; f < FFTSIZE; f += 2) {
 80038b8:	88bb      	ldrh	r3, [r7, #4]
 80038ba:	3302      	adds	r3, #2
 80038bc:	80bb      	strh	r3, [r7, #4]
 80038be:	88bb      	ldrh	r3, [r7, #4]
 80038c0:	2b1f      	cmp	r3, #31
 80038c2:	d989      	bls.n	80037d8 <main+0x260>
		}

		STOPCHRONO;
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <main+0x3b0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <main+0x3b4>)
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	4815      	ldr	r0, [pc, #84]	; (8003928 <main+0x3b0>)
 80038d2:	f003 f91c 	bl	8006b0e <HAL_TIM_Base_Stop>
 80038d6:	4814      	ldr	r0, [pc, #80]	; (8003928 <main+0x3b0>)
 80038d8:	f003 f8ca 	bl	8006a70 <HAL_TIM_Base_Init>
 80038dc:	4812      	ldr	r0, [pc, #72]	; (8003928 <main+0x3b0>)
 80038de:	f003 f8f2 	bl	8006ac6 <HAL_TIM_Base_Start>
		time_bin_process = time_us;
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <main+0x3b4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <main+0x3b8>)
 80038ea:	601a      	str	r2, [r3, #0]
	while (1) {
 80038ec:	e689      	b.n	8003602 <main+0x8a>
 80038ee:	bf00      	nop
 80038f0:	200014bc 	.word	0x200014bc
 80038f4:	20001be0 	.word	0x20001be0
 80038f8:	20001a6c 	.word	0x20001a6c
 80038fc:	200013a0 	.word	0x200013a0
 8003900:	200018ec 	.word	0x200018ec
 8003904:	2000188c 	.word	0x2000188c
 8003908:	2000153c 	.word	0x2000153c
 800390c:	2000139c 	.word	0x2000139c
 8003910:	200016c4 	.word	0x200016c4
 8003914:	20000338 	.word	0x20000338
 8003918:	20000330 	.word	0x20000330
 800391c:	20001844 	.word	0x20001844
 8003920:	20001bdc 	.word	0x20001bdc
 8003924:	2000196c 	.word	0x2000196c
 8003928:	2000184c 	.word	0x2000184c
 800392c:	20001640 	.word	0x20001640
 8003930:	20001420 	.word	0x20001420

08003934 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b0ac      	sub	sp, #176	; 0xb0
 8003938:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800393a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800393e:	2234      	movs	r2, #52	; 0x34
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f003 ff6a 	bl	800781c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003948:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	225c      	movs	r2, #92	; 0x5c
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f003 ff5b 	bl	800781c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <SystemClock_Config+0x128>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a3b      	ldr	r2, [pc, #236]	; (8003a5c <SystemClock_Config+0x128>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <SystemClock_Config+0x128>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <SystemClock_Config+0x12c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800398e:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <SystemClock_Config+0x12c>)
 8003990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <SystemClock_Config+0x12c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800399e:	607b      	str	r3, [r7, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039a2:	2302      	movs	r3, #2
 80039a4:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039ac:	2310      	movs	r3, #16
 80039ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039b2:	2302      	movs	r3, #2
 80039b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 16;
 80039be:	2310      	movs	r3, #16
 80039c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80039c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80039c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80039cc:	2304      	movs	r3, #4
 80039ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80039d2:	2302      	movs	r3, #2
 80039d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = 2;
 80039d8:	2302      	movs	r3, #2
 80039da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80039de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 fdea 	bl	80065bc <HAL_RCC_OscConfig>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <SystemClock_Config+0xbe>
		Error_Handler();
 80039ee:	f000 f9ed 	bl	8003dcc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80039f2:	230f      	movs	r3, #15
 80039f4:	66bb      	str	r3, [r7, #104]	; 0x68
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f6:	2302      	movs	r3, #2
 80039f8:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039fa:	2300      	movs	r3, #0
 80039fc:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a02:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a04:	2300      	movs	r3, #0
 8003a06:	67bb      	str	r3, [r7, #120]	; 0x78

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003a08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fdd2 	bl	80055b8 <HAL_RCC_ClockConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <SystemClock_Config+0xea>
		Error_Handler();
 8003a1a:	f000 f9d7 	bl	8003dcc <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003a22:	23c0      	movs	r3, #192	; 0xc0
 8003a24:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8003a26:	2302      	movs	r3, #2
 8003a28:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003a32:	2302      	movs	r3, #2
 8003a34:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 fed2 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <SystemClock_Config+0x11e>
		Error_Handler();
 8003a4e:	f000 f9bd 	bl	8003dcc <Error_Handler>
	}
}
 8003a52:	bf00      	nop
 8003a54:	37b0      	adds	r7, #176	; 0xb0
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40007000 	.word	0x40007000

08003a64 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a6a:	4a14      	ldr	r2, [pc, #80]	; (8003abc <MX_I2S2_Init+0x58>)
 8003a6c:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a70:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003a74:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a8a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003a8e:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_I2S2_Init+0x54>)
 8003aa4:	f001 fa8e 	bl	8004fc4 <HAL_I2S_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_I2S2_Init+0x4e>
		Error_Handler();
 8003aae:	f000 f98d 	bl	8003dcc <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20001b4c 	.word	0x20001b4c
 8003abc:	40003800 	.word	0x40003800

08003ac0 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003ac6:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <MX_I2S3_Init+0x58>)
 8003ac8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003acc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003ad0:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003ae6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003aea:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8003afe:	4805      	ldr	r0, [pc, #20]	; (8003b14 <MX_I2S3_Init+0x54>)
 8003b00:	f001 fa60 	bl	8004fc4 <HAL_I2S_Init>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_I2S3_Init+0x4e>
		Error_Handler();
 8003b0a:	f000 f95f 	bl	8003dcc <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20001b94 	.word	0x20001b94
 8003b18:	40003c00 	.word	0x40003c00

08003b1c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b30:	463b      	mov	r3, r7
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b3e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84;
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b42:	2254      	movs	r2, #84	; 0x54
 8003b44:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b46:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b52:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b54:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003b60:	4813      	ldr	r0, [pc, #76]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b62:	f002 ff85 	bl	8006a70 <HAL_TIM_Base_Init>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_TIM2_Init+0x54>
		Error_Handler();
 8003b6c:	f000 f92e 	bl	8003dcc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b74:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003b76:	f107 0308 	add.w	r3, r7, #8
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b7e:	f002 fff1 	bl	8006b64 <HAL_TIM_ConfigClockSource>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_TIM2_Init+0x70>
		Error_Handler();
 8003b88:	f000 f920 	bl	8003dcc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003b94:	463b      	mov	r3, r7
 8003b96:	4619      	mov	r1, r3
 8003b98:	4805      	ldr	r0, [pc, #20]	; (8003bb0 <MX_TIM2_Init+0x94>)
 8003b9a:	f003 f9d5 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8003ba4:	f000 f912 	bl	8003dcc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003ba8:	bf00      	nop
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	2000184c 	.word	0x2000184c

08003bb4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <MX_USART2_UART_Init+0x50>)
 8003bbc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bc4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bda:	220c      	movs	r2, #12
 8003bdc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003bea:	4805      	ldr	r0, [pc, #20]	; (8003c00 <MX_USART2_UART_Init+0x4c>)
 8003bec:	f003 fa28 	bl	8007040 <HAL_UART_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8003bf6:	f000 f8e9 	bl	8003dcc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200018ac 	.word	0x200018ac
 8003c04:	40004400 	.word	0x40004400

08003c08 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <MX_DMA_Init+0x4c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a0f      	ldr	r2, [pc, #60]	; (8003c54 <MX_DMA_Init+0x4c>)
 8003c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <MX_DMA_Init+0x4c>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	200b      	movs	r0, #11
 8003c30:	f000 fc77 	bl	8004522 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c34:	200b      	movs	r0, #11
 8003c36:	f000 fc90 	bl	800455a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	200e      	movs	r0, #14
 8003c40:	f000 fc6f 	bl	8004522 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003c44:	200e      	movs	r0, #14
 8003c46:	f000 fc88 	bl	800455a <HAL_NVIC_EnableIRQ>

}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003c5e:	f107 0314 	add.w	r3, r7, #20
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a50      	ldr	r2, [pc, #320]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a49      	ldr	r2, [pc, #292]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a42      	ldr	r2, [pc, #264]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a3b      	ldr	r2, [pc, #236]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <MX_GPIO_Init+0x160>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | VCC_4_Pin, GPIO_PIN_RESET);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8003ce4:	4835      	ldr	r0, [pc, #212]	; (8003dbc <MX_GPIO_Init+0x164>)
 8003ce6:	f001 f953 	bl	8004f90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VCC_3_Pin | VCC_2_Pin | VCC_1_Pin | GND_1_Pin,
 8003cea:	2200      	movs	r2, #0
 8003cec:	f44f 7158 	mov.w	r1, #864	; 0x360
 8003cf0:	4833      	ldr	r0, [pc, #204]	; (8003dc0 <MX_GPIO_Init+0x168>)
 8003cf2:	f001 f94d 	bl	8004f90 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GND_2_Pin | GND_3_Pin, GPIO_PIN_RESET);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003cfc:	4831      	ldr	r0, [pc, #196]	; (8003dc4 <MX_GPIO_Init+0x16c>)
 8003cfe:	f001 f947 	bl	8004f90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8003d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <MX_GPIO_Init+0x170>)
 8003d0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	4619      	mov	r1, r3
 8003d16:	482a      	ldr	r0, [pc, #168]	; (8003dc0 <MX_GPIO_Init+0x168>)
 8003d18:	f000 ffa8 	bl	8004c6c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8003d1c:	2320      	movs	r3, #32
 8003d1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d20:	2301      	movs	r3, #1
 8003d22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	4619      	mov	r1, r3
 8003d32:	4822      	ldr	r0, [pc, #136]	; (8003dbc <MX_GPIO_Init+0x164>)
 8003d34:	f000 ff9a 	bl	8004c6c <HAL_GPIO_Init>

	/*Configure GPIO pins : VCC_3_Pin VCC_2_Pin VCC_1_Pin */
	GPIO_InitStruct.Pin = VCC_3_Pin | VCC_2_Pin | VCC_1_Pin;
 8003d38:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8003d3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d46:	2300      	movs	r3, #0
 8003d48:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4a:	f107 0314 	add.w	r3, r7, #20
 8003d4e:	4619      	mov	r1, r3
 8003d50:	481b      	ldr	r0, [pc, #108]	; (8003dc0 <MX_GPIO_Init+0x168>)
 8003d52:	f000 ff8b 	bl	8004c6c <HAL_GPIO_Init>

	/*Configure GPIO pin : GND_1_Pin */
	GPIO_InitStruct.Pin = GND_1_Pin;
 8003d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2300      	movs	r3, #0
 8003d66:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GND_1_GPIO_Port, &GPIO_InitStruct);
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4814      	ldr	r0, [pc, #80]	; (8003dc0 <MX_GPIO_Init+0x168>)
 8003d70:	f000 ff7c 	bl	8004c6c <HAL_GPIO_Init>

	/*Configure GPIO pin : VCC_4_Pin */
	GPIO_InitStruct.Pin = VCC_4_Pin;
 8003d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(VCC_4_GPIO_Port, &GPIO_InitStruct);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	480b      	ldr	r0, [pc, #44]	; (8003dbc <MX_GPIO_Init+0x164>)
 8003d8e:	f000 ff6d 	bl	8004c6c <HAL_GPIO_Init>

	/*Configure GPIO pins : GND_2_Pin GND_3_Pin */
	GPIO_InitStruct.Pin = GND_2_Pin | GND_3_Pin;
 8003d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	4619      	mov	r1, r3
 8003daa:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <MX_GPIO_Init+0x16c>)
 8003dac:	f000 ff5e 	bl	8004c6c <HAL_GPIO_Init>

}
 8003db0:	bf00      	nop
 8003db2:	3728      	adds	r7, #40	; 0x28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	10210000 	.word	0x10210000

08003dcc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_MspInit+0x4c>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4a0f      	ldr	r2, [pc, #60]	; (8003e28 <HAL_MspInit+0x4c>)
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	6453      	str	r3, [r2, #68]	; 0x44
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_MspInit+0x4c>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_MspInit+0x4c>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a08      	ldr	r2, [pc, #32]	; (8003e28 <HAL_MspInit+0x4c>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_MspInit+0x4c>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e1a:	2007      	movs	r0, #7
 8003e1c:	f000 fb76 	bl	800450c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	; 0x38
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a90      	ldr	r2, [pc, #576]	; (800408c <HAL_I2S_MspInit+0x260>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d17b      	bne.n	8003f46 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a8e      	ldr	r2, [pc, #568]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5e:	4b8c      	ldr	r3, [pc, #560]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a87      	ldr	r2, [pc, #540]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b85      	ldr	r3, [pc, #532]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	4b81      	ldr	r3, [pc, #516]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4a80      	ldr	r2, [pc, #512]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e90:	f043 0302 	orr.w	r3, r3, #2
 8003e94:	6313      	str	r3, [r2, #48]	; 0x30
 8003e96:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration    
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003eb2:	2307      	movs	r3, #7
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4875      	ldr	r0, [pc, #468]	; (8004094 <HAL_I2S_MspInit+0x268>)
 8003ebe:	f000 fed5 	bl	8004c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003ec2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ed4:	2305      	movs	r3, #5
 8003ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003edc:	4619      	mov	r1, r3
 8003ede:	486e      	ldr	r0, [pc, #440]	; (8004098 <HAL_I2S_MspInit+0x26c>)
 8003ee0:	f000 fec4 	bl	8004c6c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003ee4:	4b6d      	ldr	r3, [pc, #436]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003ee6:	4a6e      	ldr	r2, [pc, #440]	; (80040a0 <HAL_I2S_MspInit+0x274>)
 8003ee8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003eea:	4b6c      	ldr	r3, [pc, #432]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ef6:	4b69      	ldr	r3, [pc, #420]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003efc:	4b67      	ldr	r3, [pc, #412]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f02:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f04:	4b65      	ldr	r3, [pc, #404]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f0a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f0c:	4b63      	ldr	r3, [pc, #396]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f12:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003f14:	4b61      	ldr	r3, [pc, #388]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f1a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f1c:	4b5f      	ldr	r3, [pc, #380]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f22:	4b5e      	ldr	r3, [pc, #376]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003f28:	485c      	ldr	r0, [pc, #368]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003f2a:	f000 fb31 	bl	8004590 <HAL_DMA_Init>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8003f34:	f7ff ff4a 	bl	8003dcc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a58      	ldr	r2, [pc, #352]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003f3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f3e:	4a57      	ldr	r2, [pc, #348]	; (800409c <HAL_I2S_MspInit+0x270>)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003f44:	e09e      	b.n	8004084 <HAL_I2S_MspInit+0x258>
  else if(hi2s->Instance==SPI3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a56      	ldr	r2, [pc, #344]	; (80040a4 <HAL_I2S_MspInit+0x278>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	f040 8099 	bne.w	8004084 <HAL_I2S_MspInit+0x258>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	4b4e      	ldr	r3, [pc, #312]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a4d      	ldr	r2, [pc, #308]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a46      	ldr	r2, [pc, #280]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b44      	ldr	r3, [pc, #272]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a3f      	ldr	r2, [pc, #252]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	4a38      	ldr	r2, [pc, #224]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb6:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_I2S_MspInit+0x264>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003fd2:	2306      	movs	r3, #6
 8003fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4832      	ldr	r0, [pc, #200]	; (80040a8 <HAL_I2S_MspInit+0x27c>)
 8003fde:	f000 fe45 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003ff2:	2307      	movs	r3, #7
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4826      	ldr	r0, [pc, #152]	; (8004098 <HAL_I2S_MspInit+0x26c>)
 8003ffe:	f000 fe35 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004010:	2300      	movs	r3, #0
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004014:	2306      	movs	r3, #6
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401c:	4619      	mov	r1, r3
 800401e:	481d      	ldr	r0, [pc, #116]	; (8004094 <HAL_I2S_MspInit+0x268>)
 8004020:	f000 fe24 	bl	8004c6c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_I2S_MspInit+0x280>)
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_I2S_MspInit+0x284>)
 8004028:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_I2S_MspInit+0x280>)
 800402c:	2200      	movs	r2, #0
 800402e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_I2S_MspInit+0x280>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_I2S_MspInit+0x280>)
 8004038:	2200      	movs	r2, #0
 800403a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_I2S_MspInit+0x280>)
 800403e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004042:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_I2S_MspInit+0x280>)
 8004046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800404a:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <HAL_I2S_MspInit+0x280>)
 800404e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004052:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_I2S_MspInit+0x280>)
 8004056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800405a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_I2S_MspInit+0x280>)
 800405e:	2200      	movs	r2, #0
 8004060:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_I2S_MspInit+0x280>)
 8004064:	2200      	movs	r2, #0
 8004066:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004068:	4810      	ldr	r0, [pc, #64]	; (80040ac <HAL_I2S_MspInit+0x280>)
 800406a:	f000 fa91 	bl	8004590 <HAL_DMA_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2S_MspInit+0x24c>
      Error_Handler();
 8004074:	f7ff feaa 	bl	8003dcc <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <HAL_I2S_MspInit+0x280>)
 800407c:	63da      	str	r2, [r3, #60]	; 0x3c
 800407e:	4a0b      	ldr	r2, [pc, #44]	; (80040ac <HAL_I2S_MspInit+0x280>)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004084:	bf00      	nop
 8004086:	3738      	adds	r7, #56	; 0x38
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40003800 	.word	0x40003800
 8004090:	40023800 	.word	0x40023800
 8004094:	40020800 	.word	0x40020800
 8004098:	40020400 	.word	0x40020400
 800409c:	20001338 	.word	0x20001338
 80040a0:	40026058 	.word	0x40026058
 80040a4:	40003c00 	.word	0x40003c00
 80040a8:	40020000 	.word	0x40020000
 80040ac:	20001aec 	.word	0x20001aec
 80040b0:	40026010 	.word	0x40026010

080040b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c4:	d10d      	bne.n	80040e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <HAL_TIM_Base_MspInit+0x3c>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <HAL_TIM_Base_MspInit+0x3c>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6413      	str	r3, [r2, #64]	; 0x40
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_TIM_Base_MspInit+0x3c>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800

080040f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a19      	ldr	r2, [pc, #100]	; (8004178 <HAL_UART_MspInit+0x84>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12b      	bne.n	800416e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_UART_MspInit+0x88>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_UART_MspInit+0x88>)
 8004120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_UART_MspInit+0x88>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <HAL_UART_MspInit+0x88>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <HAL_UART_MspInit+0x88>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6313      	str	r3, [r2, #48]	; 0x30
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_UART_MspInit+0x88>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800414e:	230c      	movs	r3, #12
 8004150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415a:	2303      	movs	r3, #3
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800415e:	2307      	movs	r3, #7
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	f107 0314 	add.w	r3, r7, #20
 8004166:	4619      	mov	r1, r3
 8004168:	4805      	ldr	r0, [pc, #20]	; (8004180 <HAL_UART_MspInit+0x8c>)
 800416a:	f000 fd7f 	bl	8004c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800416e:	bf00      	nop
 8004170:	3728      	adds	r7, #40	; 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40004400 	.word	0x40004400
 800417c:	40023800 	.word	0x40023800
 8004180:	40020000 	.word	0x40020000

08004184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004196:	e7fe      	b.n	8004196 <HardFault_Handler+0x4>

08004198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800419c:	e7fe      	b.n	800419c <MemManage_Handler+0x4>

0800419e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041a2:	e7fe      	b.n	80041a2 <BusFault_Handler+0x4>

080041a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041a8:	e7fe      	b.n	80041a8 <UsageFault_Handler+0x4>

080041aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041d8:	f000 f8a8 	bl	800432c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041dc:	bf00      	nop
 80041de:	bd80      	pop	{r7, pc}

080041e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80041e4:	4802      	ldr	r0, [pc, #8]	; (80041f0 <DMA1_Stream0_IRQHandler+0x10>)
 80041e6:	f000 fad9 	bl	800479c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20001aec 	.word	0x20001aec

080041f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80041f8:	4802      	ldr	r0, [pc, #8]	; (8004204 <DMA1_Stream3_IRQHandler+0x10>)
 80041fa:	f000 facf 	bl	800479c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20001338 	.word	0x20001338

08004208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <SystemInit+0x28>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <SystemInit+0x28>)
 8004214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <SystemInit+0x28>)
 800421e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004222:	609a      	str	r2, [r3, #8]
#endif
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800426c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800423a:	e003      	b.n	8004244 <LoopCopyDataInit>

0800423c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800423e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004240:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004242:	3104      	adds	r1, #4

08004244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004244:	480b      	ldr	r0, [pc, #44]	; (8004274 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004248:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800424a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800424c:	d3f6      	bcc.n	800423c <CopyDataInit>
  ldr  r2, =_sbss
 800424e:	4a0b      	ldr	r2, [pc, #44]	; (800427c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004250:	e002      	b.n	8004258 <LoopFillZerobss>

08004252 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004252:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004254:	f842 3b04 	str.w	r3, [r2], #4

08004258 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800425a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800425c:	d3f9      	bcc.n	8004252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800425e:	f7ff ffd3 	bl	8004208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004262:	f003 fab7 	bl	80077d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004266:	f7ff f987 	bl	8003578 <main>
  bx  lr    
 800426a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800426c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004270:	08024cdc 	.word	0x08024cdc
  ldr  r0, =_sdata
 8004274:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004278:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 800427c:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8004280:	20001c84 	.word	0x20001c84

08004284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004284:	e7fe      	b.n	8004284 <ADC_IRQHandler>
	...

08004288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <HAL_Init+0x40>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <HAL_Init+0x40>)
 8004292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_Init+0x40>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <HAL_Init+0x40>)
 800429e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_Init+0x40>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <HAL_Init+0x40>)
 80042aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042b0:	2003      	movs	r0, #3
 80042b2:	f000 f92b 	bl	800450c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042b6:	2000      	movs	r0, #0
 80042b8:	f000 f808 	bl	80042cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042bc:	f7ff fd8e 	bl	8003ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40023c00 	.word	0x40023c00

080042cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_InitTick+0x54>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_InitTick+0x58>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4619      	mov	r1, r3
 80042de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f943 	bl	8004576 <HAL_SYSTICK_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e00e      	b.n	8004318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b0f      	cmp	r3, #15
 80042fe:	d80a      	bhi.n	8004316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004300:	2200      	movs	r2, #0
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004308:	f000 f90b 	bl	8004522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800430c:	4a06      	ldr	r2, [pc, #24]	; (8004328 <HAL_InitTick+0x5c>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000200 	.word	0x20000200
 8004324:	20000208 	.word	0x20000208
 8004328:	20000204 	.word	0x20000204

0800432c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_IncTick+0x20>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_IncTick+0x24>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4413      	add	r3, r2
 800433c:	4a04      	ldr	r2, [pc, #16]	; (8004350 <HAL_IncTick+0x24>)
 800433e:	6013      	str	r3, [r2, #0]
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000208 	.word	0x20000208
 8004350:	20001c80 	.word	0x20001c80

08004354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return uwTick;
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_GetTick+0x14>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20001c80 	.word	0x20001c80

0800436c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004388:	4013      	ands	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	60d3      	str	r3, [r2, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <__NVIC_GetPriorityGrouping+0x18>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 0307 	and.w	r3, r3, #7
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	db0b      	blt.n	80043fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4907      	ldr	r1, [pc, #28]	; (8004408 <__NVIC_EnableIRQ+0x38>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2001      	movs	r0, #1
 80043f2:	fa00 f202 	lsl.w	r2, r0, r2
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	; (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	; (800445c <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
         );
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044d8:	d301      	bcc.n	80044de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044da:	2301      	movs	r3, #1
 80044dc:	e00f      	b.n	80044fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <SysTick_Config+0x40>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044e6:	210f      	movs	r1, #15
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ec:	f7ff ff8e 	bl	800440c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <SysTick_Config+0x40>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044f6:	4b04      	ldr	r3, [pc, #16]	; (8004508 <SysTick_Config+0x40>)
 80044f8:	2207      	movs	r2, #7
 80044fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	e000e010 	.word	0xe000e010

0800450c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff29 	bl	800436c <__NVIC_SetPriorityGrouping>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004534:	f7ff ff3e 	bl	80043b4 <__NVIC_GetPriorityGrouping>
 8004538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	6978      	ldr	r0, [r7, #20]
 8004540:	f7ff ff8e 	bl	8004460 <NVIC_EncodePriority>
 8004544:	4602      	mov	r2, r0
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff5d 	bl	800440c <__NVIC_SetPriority>
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff31 	bl	80043d0 <__NVIC_EnableIRQ>
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ffa2 	bl	80044c8 <SysTick_Config>
 8004584:	4603      	mov	r3, r0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff feda 	bl	8004354 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e099      	b.n	80046e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045cc:	e00f      	b.n	80045ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ce:	f7ff fec1 	bl	8004354 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d908      	bls.n	80045ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2203      	movs	r2, #3
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e078      	b.n	80046e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e8      	bne.n	80045ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_DMA_Init+0x158>)
 8004608:	4013      	ands	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2b04      	cmp	r3, #4
 8004646:	d107      	bne.n	8004658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	4313      	orrs	r3, r2
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	2b04      	cmp	r3, #4
 8004680:	d117      	bne.n	80046b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa6f 	bl	8004b78 <DMA_CheckFifoParam>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046ae:	2301      	movs	r3, #1
 80046b0:	e016      	b.n	80046e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa26 	bl	8004b0c <DMA_CalcBaseAndBitshift>
 80046c0:	4603      	mov	r3, r0
 80046c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	223f      	movs	r2, #63	; 0x3f
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	f010803f 	.word	0xf010803f

080046ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004702:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_DMA_Start_IT+0x26>
 800470e:	2302      	movs	r3, #2
 8004710:	e040      	b.n	8004794 <HAL_DMA_Start_IT+0xa8>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d12f      	bne.n	8004786 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2202      	movs	r2, #2
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f9b8 	bl	8004ab0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	223f      	movs	r2, #63	; 0x3f
 8004746:	409a      	lsls	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0216 	orr.w	r2, r2, #22
 800475a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0208 	orr.w	r2, r2, #8
 8004772:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e005      	b.n	8004792 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800478e:	2302      	movs	r3, #2
 8004790:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047a8:	4b92      	ldr	r3, [pc, #584]	; (80049f4 <HAL_DMA_IRQHandler+0x258>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a92      	ldr	r2, [pc, #584]	; (80049f8 <HAL_DMA_IRQHandler+0x25c>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	0a9b      	lsrs	r3, r3, #10
 80047b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	2208      	movs	r2, #8
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01a      	beq.n	8004808 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0204 	bic.w	r2, r2, #4
 80047ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	2208      	movs	r2, #8
 80047f6:	409a      	lsls	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004800:	f043 0201 	orr.w	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d012      	beq.n	800483e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	2201      	movs	r2, #1
 800482c:	409a      	lsls	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	f043 0202 	orr.w	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004842:	2204      	movs	r2, #4
 8004844:	409a      	lsls	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d012      	beq.n	8004874 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	2204      	movs	r2, #4
 8004862:	409a      	lsls	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f043 0204 	orr.w	r2, r3, #4
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	2210      	movs	r2, #16
 800487a:	409a      	lsls	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d043      	beq.n	800490c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d03c      	beq.n	800490c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	2210      	movs	r2, #16
 8004898:	409a      	lsls	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d018      	beq.n	80048de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d108      	bne.n	80048cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d024      	beq.n	800490c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
 80048ca:	e01f      	b.n	800490c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01b      	beq.n	800490c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
 80048dc:	e016      	b.n	800490c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d107      	bne.n	80048fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0208 	bic.w	r2, r2, #8
 80048fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	2220      	movs	r2, #32
 8004912:	409a      	lsls	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 808e 	beq.w	8004a3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8086 	beq.w	8004a3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	2220      	movs	r2, #32
 8004934:	409a      	lsls	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b05      	cmp	r3, #5
 8004944:	d136      	bne.n	80049b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0216 	bic.w	r2, r2, #22
 8004954:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004964:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <HAL_DMA_IRQHandler+0x1da>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0208 	bic.w	r2, r2, #8
 8004984:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	223f      	movs	r2, #63	; 0x3f
 800498c:	409a      	lsls	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d07d      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
        }
        return;
 80049b2:	e078      	b.n	8004aa6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01c      	beq.n	80049fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d030      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
 80049e0:	e02b      	b.n	8004a3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d027      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	e022      	b.n	8004a3a <HAL_DMA_IRQHandler+0x29e>
 80049f4:	20000200 	.word	0x20000200
 80049f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0210 	bic.w	r2, r2, #16
 8004a18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d032      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d022      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2205      	movs	r2, #5
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d307      	bcc.n	8004a82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f2      	bne.n	8004a66 <HAL_DMA_IRQHandler+0x2ca>
 8004a80:	e000      	b.n	8004a84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
 8004aa4:	e000      	b.n	8004aa8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004aa6:	bf00      	nop
    }
  }
}
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop

08004ab0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004acc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d108      	bne.n	8004af0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004aee:	e007      	b.n	8004b00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	3b10      	subs	r3, #16
 8004b1c:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <DMA_CalcBaseAndBitshift+0x64>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <DMA_CalcBaseAndBitshift+0x68>)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d909      	bls.n	8004b4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	1d1a      	adds	r2, r3, #4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004b4c:	e007      	b.n	8004b5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	aaaaaaab 	.word	0xaaaaaaab
 8004b74:	08024cc4 	.word	0x08024cc4

08004b78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11f      	bne.n	8004bd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d855      	bhi.n	8004c44 <DMA_CheckFifoParam+0xcc>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <DMA_CheckFifoParam+0x28>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc3 	.word	0x08004bc3
 8004ba8:	08004bb1 	.word	0x08004bb1
 8004bac:	08004c45 	.word	0x08004c45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d045      	beq.n	8004c48 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc0:	e042      	b.n	8004c48 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bca:	d13f      	bne.n	8004c4c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd0:	e03c      	b.n	8004c4c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bda:	d121      	bne.n	8004c20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d836      	bhi.n	8004c50 <DMA_CheckFifoParam+0xd8>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <DMA_CheckFifoParam+0x70>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004bff 	.word	0x08004bff
 8004bf0:	08004bf9 	.word	0x08004bf9
 8004bf4:	08004c11 	.word	0x08004c11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfc:	e02f      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d024      	beq.n	8004c54 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0e:	e021      	b.n	8004c54 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c18:	d11e      	bne.n	8004c58 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c1e:	e01b      	b.n	8004c58 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d902      	bls.n	8004c2c <DMA_CheckFifoParam+0xb4>
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d003      	beq.n	8004c32 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c2a:	e018      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c30:	e015      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00e      	beq.n	8004c5c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
      break;
 8004c42:	e00b      	b.n	8004c5c <DMA_CheckFifoParam+0xe4>
      break;
 8004c44:	bf00      	nop
 8004c46:	e00a      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      break;
 8004c48:	bf00      	nop
 8004c4a:	e008      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      break;
 8004c4c:	bf00      	nop
 8004c4e:	e006      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      break;
 8004c50:	bf00      	nop
 8004c52:	e004      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      break;
 8004c54:	bf00      	nop
 8004c56:	e002      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      break;   
 8004c58:	bf00      	nop
 8004c5a:	e000      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      break;
 8004c5c:	bf00      	nop
    }
  } 
  
  return status; 
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e165      	b.n	8004f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c88:	2201      	movs	r2, #1
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	f040 8154 	bne.w	8004f4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d00b      	beq.n	8004cc6 <HAL_GPIO_Init+0x5a>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d007      	beq.n	8004cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cba:	2b11      	cmp	r3, #17
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b12      	cmp	r3, #18
 8004cc4:	d130      	bne.n	8004d28 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 0201 	and.w	r2, r3, #1
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	2203      	movs	r2, #3
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d003      	beq.n	8004d68 <HAL_GPIO_Init+0xfc>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b12      	cmp	r3, #18
 8004d66:	d123      	bne.n	8004db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	08da      	lsrs	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3208      	adds	r2, #8
 8004d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	220f      	movs	r2, #15
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	08da      	lsrs	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3208      	adds	r2, #8
 8004daa:	69b9      	ldr	r1, [r7, #24]
 8004dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80ae 	beq.w	8004f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	4b5c      	ldr	r3, [pc, #368]	; (8004f68 <HAL_GPIO_Init+0x2fc>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	4a5b      	ldr	r2, [pc, #364]	; (8004f68 <HAL_GPIO_Init+0x2fc>)
 8004dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e00:	6453      	str	r3, [r2, #68]	; 0x44
 8004e02:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_GPIO_Init+0x2fc>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e0e:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_GPIO_Init+0x300>)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	3302      	adds	r3, #2
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	220f      	movs	r2, #15
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a4e      	ldr	r2, [pc, #312]	; (8004f70 <HAL_GPIO_Init+0x304>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d025      	beq.n	8004e86 <HAL_GPIO_Init+0x21a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a4d      	ldr	r2, [pc, #308]	; (8004f74 <HAL_GPIO_Init+0x308>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01f      	beq.n	8004e82 <HAL_GPIO_Init+0x216>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a4c      	ldr	r2, [pc, #304]	; (8004f78 <HAL_GPIO_Init+0x30c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d019      	beq.n	8004e7e <HAL_GPIO_Init+0x212>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a4b      	ldr	r2, [pc, #300]	; (8004f7c <HAL_GPIO_Init+0x310>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_GPIO_Init+0x20e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a4a      	ldr	r2, [pc, #296]	; (8004f80 <HAL_GPIO_Init+0x314>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00d      	beq.n	8004e76 <HAL_GPIO_Init+0x20a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a49      	ldr	r2, [pc, #292]	; (8004f84 <HAL_GPIO_Init+0x318>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <HAL_GPIO_Init+0x206>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a48      	ldr	r2, [pc, #288]	; (8004f88 <HAL_GPIO_Init+0x31c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_GPIO_Init+0x202>
 8004e6a:	2306      	movs	r3, #6
 8004e6c:	e00c      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e6e:	2307      	movs	r3, #7
 8004e70:	e00a      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e72:	2305      	movs	r3, #5
 8004e74:	e008      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e76:	2304      	movs	r3, #4
 8004e78:	e006      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e004      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e002      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e86:	2300      	movs	r3, #0
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	f002 0203 	and.w	r2, r2, #3
 8004e8e:	0092      	lsls	r2, r2, #2
 8004e90:	4093      	lsls	r3, r2
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e98:	4934      	ldr	r1, [pc, #208]	; (8004f6c <HAL_GPIO_Init+0x300>)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ea6:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004eca:	4a30      	ldr	r2, [pc, #192]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ed0:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ef4:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004efa:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	43db      	mvns	r3, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4013      	ands	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f48:	4a10      	ldr	r2, [pc, #64]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	f67f ae96 	bls.w	8004c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	3724      	adds	r7, #36	; 0x24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	40020000 	.word	0x40020000
 8004f74:	40020400 	.word	0x40020400
 8004f78:	40020800 	.word	0x40020800
 8004f7c:	40020c00 	.word	0x40020c00
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40021400 	.word	0x40021400
 8004f88:	40021800 	.word	0x40021800
 8004f8c:	40013c00 	.word	0x40013c00

08004f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fa0:	787b      	ldrb	r3, [r7, #1]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fac:	e003      	b.n	8004fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	041a      	lsls	r2, r3, #16
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	619a      	str	r2, [r3, #24]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e0e1      	b.n	800519a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a6d      	ldr	r2, [pc, #436]	; (80051a4 <HAL_I2S_Init+0x1e0>)
 8004fee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fe ff1b 	bl	8003e2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800500c:	f023 030f 	bic.w	r3, r3, #15
 8005010:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2202      	movs	r2, #2
 8005018:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d06f      	beq.n	8005102 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800502a:	2310      	movs	r3, #16
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	e001      	b.n	8005034 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005030:	2320      	movs	r3, #32
 8005032:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b20      	cmp	r3, #32
 800503a:	d802      	bhi.n	8005042 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a58      	ldr	r2, [pc, #352]	; (80051a8 <HAL_I2S_Init+0x1e4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_I2S_Init+0x92>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a56      	ldr	r2, [pc, #344]	; (80051ac <HAL_I2S_Init+0x1e8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d104      	bne.n	8005060 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8005056:	2001      	movs	r0, #1
 8005058:	f000 fef2 	bl	8005e40 <HAL_RCCEx_GetPeriphCLKFreq>
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	e003      	b.n	8005068 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005060:	2002      	movs	r0, #2
 8005062:	f000 feed 	bl	8005e40 <HAL_RCCEx_GetPeriphCLKFreq>
 8005066:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005070:	d125      	bne.n	80050be <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d010      	beq.n	800509c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	fbb2 f2f3 	udiv	r2, r2, r3
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	3305      	adds	r3, #5
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e01f      	b.n	80050dc <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	3305      	adds	r3, #5
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	e00e      	b.n	80050dc <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	3305      	adds	r3, #5
 80050da:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <HAL_I2S_Init+0x1ec>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	08db      	lsrs	r3, r3, #3
 80050e6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	e003      	b.n	800510a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005102:	2302      	movs	r3, #2
 8005104:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d902      	bls.n	8005116 <HAL_I2S_Init+0x152>
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2bff      	cmp	r3, #255	; 0xff
 8005114:	d907      	bls.n	8005126 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	f043 0210 	orr.w	r2, r3, #16
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e039      	b.n	800519a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	ea42 0103 	orr.w	r1, r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	430a      	orrs	r2, r1
 8005138:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005144:	f023 030f 	bic.w	r3, r3, #15
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6851      	ldr	r1, [r2, #4]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6892      	ldr	r2, [r2, #8]
 8005150:	4311      	orrs	r1, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68d2      	ldr	r2, [r2, #12]
 8005156:	4311      	orrs	r1, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6992      	ldr	r2, [r2, #24]
 800515c:	430a      	orrs	r2, r1
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005168:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b30      	cmp	r3, #48	; 0x30
 8005170:	d003      	beq.n	800517a <HAL_I2S_Init+0x1b6>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2bb0      	cmp	r3, #176	; 0xb0
 8005178:	d107      	bne.n	800518a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005188:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	080054a5 	.word	0x080054a5
 80051a8:	40003800 	.word	0x40003800
 80051ac:	40003c00 	.word	0x40003c00
 80051b0:	cccccccd 	.word	0xcccccccd

080051b4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_I2S_Receive_DMA+0x1a>
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e0a1      	b.n	8005316 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_I2S_Receive_DMA+0x2e>
 80051de:	2302      	movs	r3, #2
 80051e0:	e099      	b.n	8005316 <HAL_I2S_Receive_DMA+0x162>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d005      	beq.n	8005202 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80051fe:	2302      	movs	r3, #2
 8005200:	e089      	b.n	8005316 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2204      	movs	r2, #4
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d002      	beq.n	800522e <HAL_I2S_Receive_DMA+0x7a>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b05      	cmp	r3, #5
 800522c:	d10a      	bne.n	8005244 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	865a      	strh	r2, [r3, #50]	; 0x32
 8005242:	e005      	b.n	8005250 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	4a32      	ldr	r2, [pc, #200]	; (8005320 <HAL_I2S_Receive_DMA+0x16c>)
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	4a31      	ldr	r2, [pc, #196]	; (8005324 <HAL_I2S_Receive_DMA+0x170>)
 800525e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	4a30      	ldr	r2, [pc, #192]	; (8005328 <HAL_I2S_Receive_DMA+0x174>)
 8005266:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005276:	d10a      	bne.n	800528e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	4619      	mov	r1, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80052a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80052a6:	f7ff fa21 	bl	80046ec <HAL_DMA_Start_IT>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00f      	beq.n	80052d0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	f043 0208 	orr.w	r2, r3, #8
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e022      	b.n	8005316 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d107      	bne.n	80052ee <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ec:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d107      	bne.n	800530c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	08005383 	.word	0x08005383
 8005324:	08005341 	.word	0x08005341
 8005328:	0800539f 	.word	0x0800539f

0800532c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10e      	bne.n	8005374 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7fe f8eb 	bl	8003550 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7fe f8d3 	bl	800353c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0203 	bic.w	r2, r2, #3
 80053ba:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d4:	f043 0208 	orr.w	r2, r3, #8
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7ff ffa5 	bl	800532c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10e      	bne.n	800543e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800542e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fe f893 	bl	8003564 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	b292      	uxth	r2, r2
 800545a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	1c9a      	adds	r2, r3, #2
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10e      	bne.n	800549c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800548c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fe f85a 	bl	8003550 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d13a      	bne.n	8005536 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d109      	bne.n	80054de <I2S_IRQHandler+0x3a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d102      	bne.n	80054de <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ffb4 	bl	8005446 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d126      	bne.n	8005536 <I2S_IRQHandler+0x92>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d11f      	bne.n	8005536 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005504:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f043 0202 	orr.w	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fefb 	bl	800532c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b03      	cmp	r3, #3
 8005540:	d136      	bne.n	80055b0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d109      	bne.n	8005560 <I2S_IRQHandler+0xbc>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b80      	cmp	r3, #128	; 0x80
 8005558:	d102      	bne.n	8005560 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff ff45 	bl	80053ea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b08      	cmp	r3, #8
 8005568:	d122      	bne.n	80055b0 <I2S_IRQHandler+0x10c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b20      	cmp	r3, #32
 8005576:	d11b      	bne.n	80055b0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005586:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f043 0204 	orr.w	r2, r3, #4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff febe 	bl	800532c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055b0:	bf00      	nop
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0cc      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055cc:	4b68      	ldr	r3, [pc, #416]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d90c      	bls.n	80055f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b65      	ldr	r3, [pc, #404]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e2:	4b63      	ldr	r3, [pc, #396]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d001      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0b8      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d020      	beq.n	8005642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800560c:	4b59      	ldr	r3, [pc, #356]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a58      	ldr	r2, [pc, #352]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005624:	4b53      	ldr	r3, [pc, #332]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a52      	ldr	r2, [pc, #328]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800562e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005630:	4b50      	ldr	r3, [pc, #320]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	494d      	ldr	r1, [pc, #308]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d044      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d107      	bne.n	8005666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005656:	4b47      	ldr	r3, [pc, #284]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d119      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e07f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d003      	beq.n	8005676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005672:	2b03      	cmp	r3, #3
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005676:	4b3f      	ldr	r3, [pc, #252]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e06f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005686:	4b3b      	ldr	r3, [pc, #236]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e067      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005696:	4b37      	ldr	r3, [pc, #220]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f023 0203 	bic.w	r2, r3, #3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4934      	ldr	r1, [pc, #208]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056a8:	f7fe fe54 	bl	8004354 <HAL_GetTick>
 80056ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b0:	f7fe fe50 	bl	8004354 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e04f      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	4b2b      	ldr	r3, [pc, #172]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 020c 	and.w	r2, r3, #12
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d1eb      	bne.n	80056b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056d8:	4b25      	ldr	r3, [pc, #148]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d20c      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e6:	4b22      	ldr	r3, [pc, #136]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ee:	4b20      	ldr	r3, [pc, #128]	; (8005770 <HAL_RCC_ClockConfig+0x1b8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d001      	beq.n	8005700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e032      	b.n	8005766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800570c:	4b19      	ldr	r3, [pc, #100]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4916      	ldr	r1, [pc, #88]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	4313      	orrs	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	490e      	ldr	r1, [pc, #56]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800573e:	f000 fd9d 	bl	800627c <HAL_RCC_GetSysClockFreq>
 8005742:	4601      	mov	r1, r0
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <HAL_RCC_ClockConfig+0x1c0>)
 8005750:	5cd3      	ldrb	r3, [r2, r3]
 8005752:	fa21 f303 	lsr.w	r3, r1, r3
 8005756:	4a09      	ldr	r2, [pc, #36]	; (800577c <HAL_RCC_ClockConfig+0x1c4>)
 8005758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <HAL_RCC_ClockConfig+0x1c8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fdb4 	bl	80042cc <HAL_InitTick>

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40023c00 	.word	0x40023c00
 8005774:	40023800 	.word	0x40023800
 8005778:	08024cac 	.word	0x08024cac
 800577c:	20000200 	.word	0x20000200
 8005780:	20000204 	.word	0x20000204

08005784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <HAL_RCC_GetHCLKFreq+0x14>)
 800578a:	681b      	ldr	r3, [r3, #0]
}
 800578c:	4618      	mov	r0, r3
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	20000200 	.word	0x20000200

0800579c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057a0:	f7ff fff0 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 80057a4:	4601      	mov	r1, r0
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	0a9b      	lsrs	r3, r3, #10
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	4a03      	ldr	r2, [pc, #12]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b2:	5cd3      	ldrb	r3, [r2, r3]
 80057b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40023800 	.word	0x40023800
 80057c0:	08024cbc 	.word	0x08024cbc

080057c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057c8:	f7ff ffdc 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 80057cc:	4601      	mov	r1, r0
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	0b5b      	lsrs	r3, r3, #13
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	4a03      	ldr	r2, [pc, #12]	; (80057e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057da:	5cd3      	ldrb	r3, [r2, r3]
 80057dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40023800 	.word	0x40023800
 80057e8:	08024cbc 	.word	0x08024cbc

080057ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	; 0x30
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d010      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005824:	4b6f      	ldr	r3, [pc, #444]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	496c      	ldr	r1, [pc, #432]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005842:	2301      	movs	r3, #1
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d010      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005852:	4b64      	ldr	r3, [pc, #400]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005858:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005860:	4960      	ldr	r1, [pc, #384]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005870:	2301      	movs	r3, #1
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d017      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005880:	4b58      	ldr	r3, [pc, #352]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	4955      	ldr	r1, [pc, #340]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589e:	d101      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80058a0:	2301      	movs	r3, #1
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80058ac:	2301      	movs	r3, #1
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d017      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058bc:	4b49      	ldr	r3, [pc, #292]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ca:	4946      	ldr	r1, [pc, #280]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058da:	d101      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80058dc:	2301      	movs	r3, #1
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80058e8:	2301      	movs	r3, #1
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 808a 	beq.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	4b39      	ldr	r3, [pc, #228]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	4a38      	ldr	r2, [pc, #224]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005908:	6413      	str	r3, [r2, #64]	; 0x40
 800590a:	4b36      	ldr	r3, [pc, #216]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005916:	4b34      	ldr	r3, [pc, #208]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a33      	ldr	r2, [pc, #204]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005922:	f7fe fd17 	bl	8004354 <HAL_GetTick>
 8005926:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005928:	e008      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800592a:	f7fe fd13 	bl	8004354 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e278      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800593c:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005948:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005950:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d02f      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	429a      	cmp	r2, r3
 8005964:	d028      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005966:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005970:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005976:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d114      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800598e:	f7fe fce1 	bl	8004354 <HAL_GetTick>
 8005992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	e00a      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fe fcdd 	bl	8004354 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d901      	bls.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e240      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ee      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c4:	d114      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80059c6:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059da:	4902      	ldr	r1, [pc, #8]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	608b      	str	r3, [r1, #8]
 80059e0:	e00c      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40007000 	.word	0x40007000
 80059ec:	42470e40 	.word	0x42470e40
 80059f0:	4b4a      	ldr	r3, [pc, #296]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4a49      	ldr	r2, [pc, #292]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059fa:	6093      	str	r3, [r2, #8]
 80059fc:	4b47      	ldr	r3, [pc, #284]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	4944      	ldr	r1, [pc, #272]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005a20:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005a22:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005a30:	4b3a      	ldr	r3, [pc, #232]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3e:	4937      	ldr	r1, [pc, #220]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a52:	4b32      	ldr	r3, [pc, #200]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a58:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a60:	492e      	ldr	r1, [pc, #184]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d011      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a74:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a7a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	4926      	ldr	r1, [pc, #152]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a92:	d101      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005a94:	2301      	movs	r3, #1
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005aa4:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	491a      	ldr	r1, [pc, #104]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d011      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005acc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	4911      	ldr	r1, [pc, #68]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae4:	d101      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d005      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af8:	f040 80ff 	bne.w	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b02:	f7fe fc27 	bl	8004354 <HAL_GetTick>
 8005b06:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b08:	e00e      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b0a:	f7fe fc23 	bl	8004354 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d907      	bls.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e188      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	424711e0 	.word	0x424711e0
 8005b24:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b28:	4b7e      	ldr	r3, [pc, #504]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ea      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d009      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d028      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d124      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005b5c:	4b71      	ldr	r3, [pc, #452]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b62:	0c1b      	lsrs	r3, r3, #16
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	3301      	adds	r3, #1
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b6e:	4b6d      	ldr	r3, [pc, #436]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b74:	0e1b      	lsrs	r3, r3, #24
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	019b      	lsls	r3, r3, #6
 8005b86:	431a      	orrs	r2, r3
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	431a      	orrs	r2, r3
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	061b      	lsls	r3, r3, #24
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	071b      	lsls	r3, r3, #28
 8005b9e:	4961      	ldr	r1, [pc, #388]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d035      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd0:	d130      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005bd2:	4b54      	ldr	r3, [pc, #336]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	3301      	adds	r3, #1
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005be4:	4b4f      	ldr	r3, [pc, #316]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bea:	0f1b      	lsrs	r3, r3, #28
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	019b      	lsls	r3, r3, #6
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	085b      	lsrs	r3, r3, #1
 8005c02:	3b01      	subs	r3, #1
 8005c04:	041b      	lsls	r3, r3, #16
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	061b      	lsls	r3, r3, #24
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	071b      	lsls	r3, r3, #28
 8005c14:	4943      	ldr	r1, [pc, #268]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c1c:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c22:	f023 021f 	bic.w	r2, r3, #31
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	493d      	ldr	r1, [pc, #244]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d029      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c48:	d124      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005c4a:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c50:	0c1b      	lsrs	r3, r3, #16
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	3301      	adds	r3, #1
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c5c:	4b31      	ldr	r3, [pc, #196]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c62:	0f1b      	lsrs	r3, r3, #28
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	019b      	lsls	r3, r3, #6
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	041b      	lsls	r3, r3, #16
 8005c80:	431a      	orrs	r2, r3
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	431a      	orrs	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	071b      	lsls	r3, r3, #28
 8005c8c:	4925      	ldr	r1, [pc, #148]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d016      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	041b      	lsls	r3, r3, #16
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	061b      	lsls	r3, r3, #24
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	071b      	lsls	r3, r3, #28
 8005cc6:	4917      	ldr	r1, [pc, #92]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cce:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd4:	f7fe fb3e 	bl	8004354 <HAL_GetTick>
 8005cd8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cda:	e008      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cdc:	f7fe fb3a 	bl	8004354 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e09f      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cee:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	f040 8095 	bne.w	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d08:	f7fe fb24 	bl	8004354 <HAL_GetTick>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d0e:	e00f      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d10:	f7fe fb20 	bl	8004354 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d908      	bls.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e085      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800
 8005d28:	42470068 	.word	0x42470068
 8005d2c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d30:	4b41      	ldr	r3, [pc, #260]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d3c:	d0e8      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02b      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d127      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005d66:	4b34      	ldr	r3, [pc, #208]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6c:	0c1b      	lsrs	r3, r3, #16
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	3301      	adds	r3, #1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	019b      	lsls	r3, r3, #6
 8005d82:	431a      	orrs	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	041b      	lsls	r3, r3, #16
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	061b      	lsls	r3, r3, #24
 8005d94:	4928      	ldr	r1, [pc, #160]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d9c:	4b26      	ldr	r3, [pc, #152]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	3b01      	subs	r3, #1
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	4922      	ldr	r1, [pc, #136]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01d      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dca:	d118      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dcc:	4b1a      	ldr	r3, [pc, #104]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	0e1b      	lsrs	r3, r3, #24
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	019b      	lsls	r3, r3, #6
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	3b01      	subs	r3, #1
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	061b      	lsls	r3, r3, #24
 8005df6:	4910      	ldr	r1, [pc, #64]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e04:	f7fe faa6 	bl	8004354 <HAL_GetTick>
 8005e08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e0c:	f7fe faa2 	bl	8004354 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e007      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2a:	d1ef      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3730      	adds	r7, #48	; 0x30
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	42470070 	.word	0x42470070

08005e40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b089      	sub	sp, #36	; 0x24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	2b07      	cmp	r3, #7
 8005e66:	f200 81fa 	bhi.w	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08006039 	.word	0x08006039
 8005e74:	08006155 	.word	0x08006155
 8005e78:	0800625f 	.word	0x0800625f
 8005e7c:	08005e91 	.word	0x08005e91
 8005e80:	0800625f 	.word	0x0800625f
 8005e84:	0800625f 	.word	0x0800625f
 8005e88:	0800625f 	.word	0x0800625f
 8005e8c:	08005e91 	.word	0x08005e91
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8005e90:	4bac      	ldr	r3, [pc, #688]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e96:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8005e9e:	613b      	str	r3, [r7, #16]
      switch (saiclocksource)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ea6:	f000 80b7 	beq.w	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005eaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eae:	d809      	bhi.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8005eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb4:	d04c      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eba:	f000 8083 	beq.w	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          }
          break;
        }
      default :
        {
          break;
 8005ec2:	e0b8      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
      switch (saiclocksource)
 8005ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ec8:	d07c      	beq.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005eca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ece:	f000 80a6 	beq.w	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8005ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed6:	d03b      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          break;
 8005ed8:	e0ad      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005eda:	4b9a      	ldr	r3, [pc, #616]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8005ee6:	4b97      	ldr	r3, [pc, #604]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef0:	4a95      	ldr	r2, [pc, #596]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	e008      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8005efa:	4b92      	ldr	r3, [pc, #584]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f04:	4a91      	ldr	r2, [pc, #580]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8005f0c:	4b8d      	ldr	r3, [pc, #564]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f12:	0e1b      	lsrs	r3, r3, #24
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8005f1a:	4b8a      	ldr	r3, [pc, #552]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	099b      	lsrs	r3, r3, #6
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	fb02 f203 	mul.w	r2, r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8005f34:	4b83      	ldr	r3, [pc, #524]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	3301      	adds	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	61fb      	str	r3, [r7, #28]
          break;
 8005f4e:	e072      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f50:	4b7c      	ldr	r3, [pc, #496]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f5c:	4b79      	ldr	r3, [pc, #484]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f66:	4a78      	ldr	r2, [pc, #480]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	e008      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8005f70:	4b74      	ldr	r3, [pc, #464]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f7a:	4a74      	ldr	r2, [pc, #464]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8005f82:	4b70      	ldr	r3, [pc, #448]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f88:	0e1b      	lsrs	r3, r3, #24
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8005f90:	4b6c      	ldr	r3, [pc, #432]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f96:	099b      	lsrs	r3, r3, #6
 8005f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	fb02 f203 	mul.w	r2, r2, r3
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa8:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8005faa:	4b66      	ldr	r3, [pc, #408]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	61fb      	str	r3, [r7, #28]
          break;
 8005fc2:	e038      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005fc4:	4b5f      	ldr	r3, [pc, #380]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d108      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fd0:	4b5c      	ldr	r3, [pc, #368]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd8:	4a5b      	ldr	r2, [pc, #364]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e007      	b.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005fe2:	4b58      	ldr	r3, [pc, #352]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fea:	4a58      	ldr	r2, [pc, #352]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8005ff2:	4b54      	ldr	r3, [pc, #336]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	0f1b      	lsrs	r3, r3, #28
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8005ffe:	4b51      	ldr	r3, [pc, #324]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	099b      	lsrs	r3, r3, #6
 8006004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	fb02 f203 	mul.w	r2, r2, r3
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	61fb      	str	r3, [r7, #28]
          break;
 8006016:	e00e      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006018:	4b4d      	ldr	r3, [pc, #308]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800601a:	61fb      	str	r3, [r7, #28]
          break;
 800601c:	e00b      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800601e:	4b49      	ldr	r3, [pc, #292]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
            frequency = (uint32_t)(HSI_VALUE);
 800602a:	4b47      	ldr	r3, [pc, #284]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800602c:	61fb      	str	r3, [r7, #28]
          break;
 800602e:	e001      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            frequency = (uint32_t)(HSE_VALUE);
 8006030:	4b46      	ldr	r3, [pc, #280]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8006032:	61fb      	str	r3, [r7, #28]
          break;
 8006034:	bf00      	nop
        }
      }
      break;
 8006036:	e112      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8006038:	4b42      	ldr	r3, [pc, #264]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800603a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800603e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006042:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800604a:	d00c      	beq.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 800604c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006050:	d802      	bhi.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006056:	e070      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800605c:	d035      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800605e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006062:	d05d      	beq.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006064:	e069      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006066:	4b3a      	ldr	r3, [pc, #232]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8006068:	61fb      	str	r3, [r7, #28]
          break;
 800606a:	e069      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800606c:	4b35      	ldr	r3, [pc, #212]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006078:	d109      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800607a:	4b32      	ldr	r3, [pc, #200]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006084:	4a31      	ldr	r2, [pc, #196]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8006086:	fbb2 f3f3 	udiv	r3, r2, r3
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	e008      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800608e:	4b2d      	ldr	r3, [pc, #180]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8006090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006098:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80060a0:	4b28      	ldr	r3, [pc, #160]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80060a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80060b4:	4b23      	ldr	r3, [pc, #140]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80060b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ba:	0f1b      	lsrs	r3, r3, #28
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c6:	61fb      	str	r3, [r7, #28]
          break;
 80060c8:	e03a      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80060ca:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060d6:	d108      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060d8:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e0:	4a1a      	ldr	r2, [pc, #104]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	e007      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060ea:	4b16      	ldr	r3, [pc, #88]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060f2:	4a15      	ldr	r2, [pc, #84]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	099b      	lsrs	r3, r3, #6
 8006100:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	fb02 f303 	mul.w	r3, r2, r3
 800610a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	0f1b      	lsrs	r3, r3, #28
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	61fb      	str	r3, [r7, #28]
          break;
 800611e:	e00f      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006120:	4b08      	ldr	r3, [pc, #32]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800612c:	d102      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
          {
            frequency = HSE_VALUE;
 800612e:	4b07      	ldr	r3, [pc, #28]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8006130:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006132:	e005      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
            frequency = HSI_VALUE;
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8006136:	61fb      	str	r3, [r7, #28]
          break;
 8006138:	e002      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
          break;
 800613e:	bf00      	nop
        }
      }
      break;
 8006140:	e08d      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
 8006148:	00f42400 	.word	0x00f42400
 800614c:	007a1200 	.word	0x007a1200
 8006150:	00bb8000 	.word	0x00bb8000
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8006154:	4b45      	ldr	r3, [pc, #276]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8006156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800615a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800615e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006166:	d00c      	beq.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800616c:	d802      	bhi.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8006172:	e070      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8006174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006178:	d035      	beq.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800617a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800617e:	d05d      	beq.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006180:	e069      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006182:	4b3b      	ldr	r3, [pc, #236]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x430>)
 8006184:	61fb      	str	r3, [r7, #28]
          break;
 8006186:	e069      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006188:	4b38      	ldr	r3, [pc, #224]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006194:	d109      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006196:	4b35      	ldr	r3, [pc, #212]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8006198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800619c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a0:	4a34      	ldr	r2, [pc, #208]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	e008      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80061aa:	4b30      	ldr	r3, [pc, #192]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80061ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061b4:	4a30      	ldr	r2, [pc, #192]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80061b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ba:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80061bc:	4b2b      	ldr	r3, [pc, #172]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80061be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c2:	099b      	lsrs	r3, r3, #6
 80061c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80061d0:	4b26      	ldr	r3, [pc, #152]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80061d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d6:	0f1b      	lsrs	r3, r3, #28
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e2:	61fb      	str	r3, [r7, #28]
          break;
 80061e4:	e03a      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80061e6:	4b21      	ldr	r3, [pc, #132]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f2:	d108      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061f4:	4b1d      	ldr	r3, [pc, #116]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 80061fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e007      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800620e:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006216:	4b15      	ldr	r3, [pc, #84]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	fb02 f303 	mul.w	r3, r2, r3
 8006226:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8006228:	4b10      	ldr	r3, [pc, #64]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	0f1b      	lsrs	r3, r3, #28
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	fbb2 f3f3 	udiv	r3, r2, r3
 8006238:	61fb      	str	r3, [r7, #28]
          break;
 800623a:	e00f      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006248:	d102      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          {
            frequency = HSE_VALUE;
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 800624c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800624e:	e005      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            frequency = HSI_VALUE;
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006252:	61fb      	str	r3, [r7, #28]
          break;
 8006254:	e002      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
          break;
 800625a:	bf00      	nop
        }
      }
      break;
 800625c:	bf00      	nop
    }
  }
  return frequency;
 800625e:	69fb      	ldr	r3, [r7, #28]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3724      	adds	r7, #36	; 0x24
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40023800 	.word	0x40023800
 8006270:	00bb8000 	.word	0x00bb8000
 8006274:	007a1200 	.word	0x007a1200
 8006278:	00f42400 	.word	0x00f42400

0800627c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800627c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006296:	4bc6      	ldr	r3, [pc, #792]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b0c      	cmp	r3, #12
 80062a0:	f200 817e 	bhi.w	80065a0 <HAL_RCC_GetSysClockFreq+0x324>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <HAL_RCC_GetSysClockFreq+0x30>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062e1 	.word	0x080062e1
 80062b0:	080065a1 	.word	0x080065a1
 80062b4:	080065a1 	.word	0x080065a1
 80062b8:	080065a1 	.word	0x080065a1
 80062bc:	080062e7 	.word	0x080062e7
 80062c0:	080065a1 	.word	0x080065a1
 80062c4:	080065a1 	.word	0x080065a1
 80062c8:	080065a1 	.word	0x080065a1
 80062cc:	080062ed 	.word	0x080062ed
 80062d0:	080065a1 	.word	0x080065a1
 80062d4:	080065a1 	.word	0x080065a1
 80062d8:	080065a1 	.word	0x080065a1
 80062dc:	08006449 	.word	0x08006449
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062e0:	4bb4      	ldr	r3, [pc, #720]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x338>)
 80062e2:	613b      	str	r3, [r7, #16]
       break;
 80062e4:	e15f      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062e6:	4bb4      	ldr	r3, [pc, #720]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80062e8:	613b      	str	r3, [r7, #16]
      break;
 80062ea:	e15c      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062ec:	4bb0      	ldr	r3, [pc, #704]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062f6:	4bae      	ldr	r3, [pc, #696]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d04a      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006302:	4bab      	ldr	r3, [pc, #684]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	099b      	lsrs	r3, r3, #6
 8006308:	f04f 0400 	mov.w	r4, #0
 800630c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	ea03 0501 	and.w	r5, r3, r1
 8006318:	ea04 0602 	and.w	r6, r4, r2
 800631c:	4629      	mov	r1, r5
 800631e:	4632      	mov	r2, r6
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	f04f 0400 	mov.w	r4, #0
 8006328:	0154      	lsls	r4, r2, #5
 800632a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800632e:	014b      	lsls	r3, r1, #5
 8006330:	4619      	mov	r1, r3
 8006332:	4622      	mov	r2, r4
 8006334:	1b49      	subs	r1, r1, r5
 8006336:	eb62 0206 	sbc.w	r2, r2, r6
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	f04f 0400 	mov.w	r4, #0
 8006342:	0194      	lsls	r4, r2, #6
 8006344:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006348:	018b      	lsls	r3, r1, #6
 800634a:	1a5b      	subs	r3, r3, r1
 800634c:	eb64 0402 	sbc.w	r4, r4, r2
 8006350:	f04f 0100 	mov.w	r1, #0
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	00e2      	lsls	r2, r4, #3
 800635a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800635e:	00d9      	lsls	r1, r3, #3
 8006360:	460b      	mov	r3, r1
 8006362:	4614      	mov	r4, r2
 8006364:	195b      	adds	r3, r3, r5
 8006366:	eb44 0406 	adc.w	r4, r4, r6
 800636a:	f04f 0100 	mov.w	r1, #0
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	0262      	lsls	r2, r4, #9
 8006374:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006378:	0259      	lsls	r1, r3, #9
 800637a:	460b      	mov	r3, r1
 800637c:	4614      	mov	r4, r2
 800637e:	4618      	mov	r0, r3
 8006380:	4621      	mov	r1, r4
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f04f 0400 	mov.w	r4, #0
 8006388:	461a      	mov	r2, r3
 800638a:	4623      	mov	r3, r4
 800638c:	f7f9 ff9a 	bl	80002c4 <__aeabi_uldivmod>
 8006390:	4603      	mov	r3, r0
 8006392:	460c      	mov	r4, r1
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e049      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006398:	4b85      	ldr	r3, [pc, #532]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	099b      	lsrs	r3, r3, #6
 800639e:	f04f 0400 	mov.w	r4, #0
 80063a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	ea03 0501 	and.w	r5, r3, r1
 80063ae:	ea04 0602 	and.w	r6, r4, r2
 80063b2:	4629      	mov	r1, r5
 80063b4:	4632      	mov	r2, r6
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	f04f 0400 	mov.w	r4, #0
 80063be:	0154      	lsls	r4, r2, #5
 80063c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063c4:	014b      	lsls	r3, r1, #5
 80063c6:	4619      	mov	r1, r3
 80063c8:	4622      	mov	r2, r4
 80063ca:	1b49      	subs	r1, r1, r5
 80063cc:	eb62 0206 	sbc.w	r2, r2, r6
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	f04f 0400 	mov.w	r4, #0
 80063d8:	0194      	lsls	r4, r2, #6
 80063da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063de:	018b      	lsls	r3, r1, #6
 80063e0:	1a5b      	subs	r3, r3, r1
 80063e2:	eb64 0402 	sbc.w	r4, r4, r2
 80063e6:	f04f 0100 	mov.w	r1, #0
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	00e2      	lsls	r2, r4, #3
 80063f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80063f4:	00d9      	lsls	r1, r3, #3
 80063f6:	460b      	mov	r3, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	195b      	adds	r3, r3, r5
 80063fc:	eb44 0406 	adc.w	r4, r4, r6
 8006400:	f04f 0100 	mov.w	r1, #0
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	02a2      	lsls	r2, r4, #10
 800640a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800640e:	0299      	lsls	r1, r3, #10
 8006410:	460b      	mov	r3, r1
 8006412:	4614      	mov	r4, r2
 8006414:	4618      	mov	r0, r3
 8006416:	4621      	mov	r1, r4
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f04f 0400 	mov.w	r4, #0
 800641e:	461a      	mov	r2, r3
 8006420:	4623      	mov	r3, r4
 8006422:	f7f9 ff4f 	bl	80002c4 <__aeabi_uldivmod>
 8006426:	4603      	mov	r3, r0
 8006428:	460c      	mov	r4, r1
 800642a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800642c:	4b60      	ldr	r3, [pc, #384]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	3301      	adds	r3, #1
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	613b      	str	r3, [r7, #16]
      break;
 8006446:	e0ae      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006448:	4b59      	ldr	r3, [pc, #356]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006450:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006452:	4b57      	ldr	r3, [pc, #348]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d04a      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800645e:	4b54      	ldr	r3, [pc, #336]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	099b      	lsrs	r3, r3, #6
 8006464:	f04f 0400 	mov.w	r4, #0
 8006468:	f240 11ff 	movw	r1, #511	; 0x1ff
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	ea03 0501 	and.w	r5, r3, r1
 8006474:	ea04 0602 	and.w	r6, r4, r2
 8006478:	4629      	mov	r1, r5
 800647a:	4632      	mov	r2, r6
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	f04f 0400 	mov.w	r4, #0
 8006484:	0154      	lsls	r4, r2, #5
 8006486:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800648a:	014b      	lsls	r3, r1, #5
 800648c:	4619      	mov	r1, r3
 800648e:	4622      	mov	r2, r4
 8006490:	1b49      	subs	r1, r1, r5
 8006492:	eb62 0206 	sbc.w	r2, r2, r6
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	f04f 0400 	mov.w	r4, #0
 800649e:	0194      	lsls	r4, r2, #6
 80064a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80064a4:	018b      	lsls	r3, r1, #6
 80064a6:	1a5b      	subs	r3, r3, r1
 80064a8:	eb64 0402 	sbc.w	r4, r4, r2
 80064ac:	f04f 0100 	mov.w	r1, #0
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	00e2      	lsls	r2, r4, #3
 80064b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064ba:	00d9      	lsls	r1, r3, #3
 80064bc:	460b      	mov	r3, r1
 80064be:	4614      	mov	r4, r2
 80064c0:	195b      	adds	r3, r3, r5
 80064c2:	eb44 0406 	adc.w	r4, r4, r6
 80064c6:	f04f 0100 	mov.w	r1, #0
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	0262      	lsls	r2, r4, #9
 80064d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80064d4:	0259      	lsls	r1, r3, #9
 80064d6:	460b      	mov	r3, r1
 80064d8:	4614      	mov	r4, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	4621      	mov	r1, r4
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f04f 0400 	mov.w	r4, #0
 80064e4:	461a      	mov	r2, r3
 80064e6:	4623      	mov	r3, r4
 80064e8:	f7f9 feec 	bl	80002c4 <__aeabi_uldivmod>
 80064ec:	4603      	mov	r3, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e049      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f4:	4b2e      	ldr	r3, [pc, #184]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	f04f 0400 	mov.w	r4, #0
 80064fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	ea03 0501 	and.w	r5, r3, r1
 800650a:	ea04 0602 	and.w	r6, r4, r2
 800650e:	4629      	mov	r1, r5
 8006510:	4632      	mov	r2, r6
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	f04f 0400 	mov.w	r4, #0
 800651a:	0154      	lsls	r4, r2, #5
 800651c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006520:	014b      	lsls	r3, r1, #5
 8006522:	4619      	mov	r1, r3
 8006524:	4622      	mov	r2, r4
 8006526:	1b49      	subs	r1, r1, r5
 8006528:	eb62 0206 	sbc.w	r2, r2, r6
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	f04f 0400 	mov.w	r4, #0
 8006534:	0194      	lsls	r4, r2, #6
 8006536:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800653a:	018b      	lsls	r3, r1, #6
 800653c:	1a5b      	subs	r3, r3, r1
 800653e:	eb64 0402 	sbc.w	r4, r4, r2
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	00e2      	lsls	r2, r4, #3
 800654c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006550:	00d9      	lsls	r1, r3, #3
 8006552:	460b      	mov	r3, r1
 8006554:	4614      	mov	r4, r2
 8006556:	195b      	adds	r3, r3, r5
 8006558:	eb44 0406 	adc.w	r4, r4, r6
 800655c:	f04f 0100 	mov.w	r1, #0
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	02a2      	lsls	r2, r4, #10
 8006566:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800656a:	0299      	lsls	r1, r3, #10
 800656c:	460b      	mov	r3, r1
 800656e:	4614      	mov	r4, r2
 8006570:	4618      	mov	r0, r3
 8006572:	4621      	mov	r1, r4
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f04f 0400 	mov.w	r4, #0
 800657a:	461a      	mov	r2, r3
 800657c:	4623      	mov	r3, r4
 800657e:	f7f9 fea1 	bl	80002c4 <__aeabi_uldivmod>
 8006582:	4603      	mov	r3, r0
 8006584:	460c      	mov	r4, r1
 8006586:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x334>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	0f1b      	lsrs	r3, r3, #28
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	fbb2 f3f3 	udiv	r3, r2, r3
 800659c:	613b      	str	r3, [r7, #16]
      break;
 800659e:	e002      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x338>)
 80065a2:	613b      	str	r3, [r7, #16]
      break;
 80065a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a6:	693b      	ldr	r3, [r7, #16]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b0:	40023800 	.word	0x40023800
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	007a1200 	.word	0x007a1200

080065bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8083 	beq.w	80066dc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80065d6:	4b95      	ldr	r3, [pc, #596]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d019      	beq.n	8006616 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80065e2:	4b92      	ldr	r3, [pc, #584]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d106      	bne.n	80065fc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80065ee:	4b8f      	ldr	r3, [pc, #572]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065fa:	d00c      	beq.n	8006616 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065fc:	4b8b      	ldr	r3, [pc, #556]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006604:	2b0c      	cmp	r3, #12
 8006606:	d112      	bne.n	800662e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006608:	4b88      	ldr	r3, [pc, #544]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006614:	d10b      	bne.n	800662e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006616:	4b85      	ldr	r3, [pc, #532]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d05b      	beq.n	80066da <HAL_RCC_OscConfig+0x11e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d157      	bne.n	80066da <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e216      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006636:	d106      	bne.n	8006646 <HAL_RCC_OscConfig+0x8a>
 8006638:	4b7c      	ldr	r3, [pc, #496]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a7b      	ldr	r2, [pc, #492]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800663e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	e01d      	b.n	8006682 <HAL_RCC_OscConfig+0xc6>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800664e:	d10c      	bne.n	800666a <HAL_RCC_OscConfig+0xae>
 8006650:	4b76      	ldr	r3, [pc, #472]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a75      	ldr	r2, [pc, #468]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	4b73      	ldr	r3, [pc, #460]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a72      	ldr	r2, [pc, #456]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	e00b      	b.n	8006682 <HAL_RCC_OscConfig+0xc6>
 800666a:	4b70      	ldr	r3, [pc, #448]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a6f      	ldr	r2, [pc, #444]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4b6d      	ldr	r3, [pc, #436]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a6c      	ldr	r2, [pc, #432]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800667c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006680:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d013      	beq.n	80066b2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668a:	f7fd fe63 	bl	8004354 <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006692:	f7fd fe5f 	bl	8004354 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b64      	cmp	r3, #100	; 0x64
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e1db      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a4:	4b61      	ldr	r3, [pc, #388]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCC_OscConfig+0xd6>
 80066b0:	e014      	b.n	80066dc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fd fe4f 	bl	8004354 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066ba:	f7fd fe4b 	bl	8004354 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b64      	cmp	r3, #100	; 0x64
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e1c7      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066cc:	4b57      	ldr	r3, [pc, #348]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0xfe>
 80066d8:	e000      	b.n	80066dc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d06f      	beq.n	80067c8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80066e8:	4b50      	ldr	r3, [pc, #320]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 030c 	and.w	r3, r3, #12
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d017      	beq.n	8006724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80066f4:	4b4d      	ldr	r3, [pc, #308]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d105      	bne.n	800670c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006700:	4b4a      	ldr	r3, [pc, #296]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800670c:	4b47      	ldr	r3, [pc, #284]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d11c      	bne.n	8006752 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006718:	4b44      	ldr	r3, [pc, #272]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d116      	bne.n	8006752 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006724:	4b41      	ldr	r3, [pc, #260]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_OscConfig+0x180>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e18f      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673c:	4b3b      	ldr	r3, [pc, #236]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	4938      	ldr	r1, [pc, #224]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800674c:	4313      	orrs	r3, r2
 800674e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006750:	e03a      	b.n	80067c8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d020      	beq.n	800679c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800675a:	4b35      	ldr	r3, [pc, #212]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006760:	f7fd fdf8 	bl	8004354 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006768:	f7fd fdf4 	bl	8004354 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e170      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677a:	4b2c      	ldr	r3, [pc, #176]	; (800682c <HAL_RCC_OscConfig+0x270>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006786:	4b29      	ldr	r3, [pc, #164]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	4925      	ldr	r1, [pc, #148]	; (800682c <HAL_RCC_OscConfig+0x270>)
 8006796:	4313      	orrs	r3, r2
 8006798:	600b      	str	r3, [r1, #0]
 800679a:	e015      	b.n	80067c8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800679c:	4b24      	ldr	r3, [pc, #144]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fd fdd7 	bl	8004354 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067aa:	f7fd fdd3 	bl	8004354 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e14f      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f0      	bne.n	80067aa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d037      	beq.n	8006844 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d016      	beq.n	800680a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067dc:	4b15      	ldr	r3, [pc, #84]	; (8006834 <HAL_RCC_OscConfig+0x278>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e2:	f7fd fdb7 	bl	8004354 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ea:	f7fd fdb3 	bl	8004354 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e12f      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_RCC_OscConfig+0x270>)
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x22e>
 8006808:	e01c      	b.n	8006844 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <HAL_RCC_OscConfig+0x278>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006810:	f7fd fda0 	bl	8004354 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006816:	e00f      	b.n	8006838 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006818:	f7fd fd9c 	bl	8004354 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d908      	bls.n	8006838 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e118      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800
 8006830:	42470000 	.word	0x42470000
 8006834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006838:	4b8a      	ldr	r3, [pc, #552]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 800683a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e9      	bne.n	8006818 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8097 	beq.w	8006980 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006856:	4b83      	ldr	r3, [pc, #524]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10f      	bne.n	8006882 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	4b7f      	ldr	r3, [pc, #508]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	4a7e      	ldr	r2, [pc, #504]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 800686c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006870:	6413      	str	r3, [r2, #64]	; 0x40
 8006872:	4b7c      	ldr	r3, [pc, #496]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800687e:	2301      	movs	r3, #1
 8006880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006882:	4b79      	ldr	r3, [pc, #484]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d118      	bne.n	80068c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800688e:	4b76      	ldr	r3, [pc, #472]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a75      	ldr	r2, [pc, #468]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689a:	f7fd fd5b 	bl	8004354 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a2:	f7fd fd57 	bl	8004354 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e0d3      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b4:	4b6c      	ldr	r3, [pc, #432]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d106      	bne.n	80068d6 <HAL_RCC_OscConfig+0x31a>
 80068c8:	4b66      	ldr	r3, [pc, #408]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	4a65      	ldr	r2, [pc, #404]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	6713      	str	r3, [r2, #112]	; 0x70
 80068d4:	e01c      	b.n	8006910 <HAL_RCC_OscConfig+0x354>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCC_OscConfig+0x33c>
 80068de:	4b61      	ldr	r3, [pc, #388]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	4a60      	ldr	r2, [pc, #384]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80068e4:	f043 0304 	orr.w	r3, r3, #4
 80068e8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ea:	4b5e      	ldr	r3, [pc, #376]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	4a5d      	ldr	r2, [pc, #372]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6713      	str	r3, [r2, #112]	; 0x70
 80068f6:	e00b      	b.n	8006910 <HAL_RCC_OscConfig+0x354>
 80068f8:	4b5a      	ldr	r3, [pc, #360]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80068fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fc:	4a59      	ldr	r2, [pc, #356]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	6713      	str	r3, [r2, #112]	; 0x70
 8006904:	4b57      	ldr	r3, [pc, #348]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006908:	4a56      	ldr	r2, [pc, #344]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 800690a:	f023 0304 	bic.w	r3, r3, #4
 800690e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fd fd1c 	bl	8004354 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800691e:	e00a      	b.n	8006936 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006920:	f7fd fd18 	bl	8004354 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	; 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e092      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006936:	4b4b      	ldr	r3, [pc, #300]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0ee      	beq.n	8006920 <HAL_RCC_OscConfig+0x364>
 8006942:	e014      	b.n	800696e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fd fd06 	bl	8004354 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694a:	e00a      	b.n	8006962 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fd fd02 	bl	8004354 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e07c      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006962:	4b40      	ldr	r3, [pc, #256]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1ee      	bne.n	800694c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d105      	bne.n	8006980 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006974:	4b3b      	ldr	r3, [pc, #236]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	4a3a      	ldr	r2, [pc, #232]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 800697a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800697e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d068      	beq.n	8006a5a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006988:	4b36      	ldr	r3, [pc, #216]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 030c 	and.w	r3, r3, #12
 8006990:	2b08      	cmp	r3, #8
 8006992:	d060      	beq.n	8006a56 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d145      	bne.n	8006a28 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800699c:	4b33      	ldr	r3, [pc, #204]	; (8006a6c <HAL_RCC_OscConfig+0x4b0>)
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a2:	f7fd fcd7 	bl	8004354 <HAL_GetTick>
 80069a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069aa:	f7fd fcd3 	bl	8004354 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e04f      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069bc:	4b29      	ldr	r3, [pc, #164]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f0      	bne.n	80069aa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	019b      	lsls	r3, r3, #6
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	3b01      	subs	r3, #1
 80069e2:	041b      	lsls	r3, r3, #16
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	061b      	lsls	r3, r3, #24
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	071b      	lsls	r3, r3, #28
 80069f4:	491b      	ldr	r1, [pc, #108]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069fa:	4b1c      	ldr	r3, [pc, #112]	; (8006a6c <HAL_RCC_OscConfig+0x4b0>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a00:	f7fd fca8 	bl	8004354 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a08:	f7fd fca4 	bl	8004354 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e020      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x44c>
 8006a26:	e018      	b.n	8006a5a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a28:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <HAL_RCC_OscConfig+0x4b0>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2e:	f7fd fc91 	bl	8004354 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a36:	f7fd fc8d 	bl	8004354 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e009      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a48:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <HAL_RCC_OscConfig+0x4a8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f0      	bne.n	8006a36 <HAL_RCC_OscConfig+0x47a>
 8006a54:	e001      	b.n	8006a5a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40007000 	.word	0x40007000
 8006a6c:	42470060 	.word	0x42470060

08006a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e01d      	b.n	8006abe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fd fb0c 	bl	80040b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f000 f910 	bl	8006cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b06      	cmp	r3, #6
 8006ae6:	d007      	beq.n	8006af8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10f      	bne.n	8006b4e <HAL_TIM_Base_Stop+0x40>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6a1a      	ldr	r2, [r3, #32]
 8006b34:	f240 4344 	movw	r3, #1092	; 0x444
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d107      	bne.n	8006b4e <HAL_TIM_Base_Stop+0x40>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0201 	bic.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIM_ConfigClockSource+0x18>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e0a6      	b.n	8006cca <HAL_TIM_ConfigClockSource+0x166>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ba2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d067      	beq.n	8006c84 <HAL_TIM_ConfigClockSource+0x120>
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	d80b      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x6c>
 8006bb8:	2b10      	cmp	r3, #16
 8006bba:	d073      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x140>
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d802      	bhi.n	8006bc6 <HAL_TIM_ConfigClockSource+0x62>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d06f      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006bc4:	e078      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d06c      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x140>
 8006bca:	2b30      	cmp	r3, #48	; 0x30
 8006bcc:	d06a      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006bce:	e073      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bd0:	2b70      	cmp	r3, #112	; 0x70
 8006bd2:	d00d      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x8c>
 8006bd4:	2b70      	cmp	r3, #112	; 0x70
 8006bd6:	d804      	bhi.n	8006be2 <HAL_TIM_ConfigClockSource+0x7e>
 8006bd8:	2b50      	cmp	r3, #80	; 0x50
 8006bda:	d033      	beq.n	8006c44 <HAL_TIM_ConfigClockSource+0xe0>
 8006bdc:	2b60      	cmp	r3, #96	; 0x60
 8006bde:	d041      	beq.n	8006c64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006be0:	e06a      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be6:	d066      	beq.n	8006cb6 <HAL_TIM_ConfigClockSource+0x152>
 8006be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bec:	d017      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006bee:	e063      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6899      	ldr	r1, [r3, #8]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f000 f982 	bl	8006f08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	609a      	str	r2, [r3, #8]
      break;
 8006c1c:	e04c      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6899      	ldr	r1, [r3, #8]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f000 f96b 	bl	8006f08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c40:	609a      	str	r2, [r3, #8]
      break;
 8006c42:	e039      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6859      	ldr	r1, [r3, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	461a      	mov	r2, r3
 8006c52:	f000 f8df 	bl	8006e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2150      	movs	r1, #80	; 0x50
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f938 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c62:	e029      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	6859      	ldr	r1, [r3, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	461a      	mov	r2, r3
 8006c72:	f000 f8fe 	bl	8006e72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2160      	movs	r1, #96	; 0x60
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 f928 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c82:	e019      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	6859      	ldr	r1, [r3, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	461a      	mov	r2, r3
 8006c92:	f000 f8bf 	bl	8006e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2140      	movs	r1, #64	; 0x40
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 f918 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006ca2:	e009      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f000 f90f 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006cb4:	e000      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a40      	ldr	r2, [pc, #256]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf2:	d00f      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a3d      	ldr	r2, [pc, #244]	; (8006dec <TIM_Base_SetConfig+0x118>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00b      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3c      	ldr	r2, [pc, #240]	; (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d007      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a3b      	ldr	r2, [pc, #236]	; (8006df4 <TIM_Base_SetConfig+0x120>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3a      	ldr	r2, [pc, #232]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d108      	bne.n	8006d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2f      	ldr	r2, [pc, #188]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d02b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d34:	d027      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2c      	ldr	r2, [pc, #176]	; (8006dec <TIM_Base_SetConfig+0x118>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d023      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2b      	ldr	r2, [pc, #172]	; (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01f      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2a      	ldr	r2, [pc, #168]	; (8006df4 <TIM_Base_SetConfig+0x120>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d01b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a29      	ldr	r2, [pc, #164]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d017      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a28      	ldr	r2, [pc, #160]	; (8006dfc <TIM_Base_SetConfig+0x128>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <TIM_Base_SetConfig+0x12c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00f      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <TIM_Base_SetConfig+0x130>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <TIM_Base_SetConfig+0x134>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a24      	ldr	r2, [pc, #144]	; (8006e0c <TIM_Base_SetConfig+0x138>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a23      	ldr	r2, [pc, #140]	; (8006e10 <TIM_Base_SetConfig+0x13c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d108      	bne.n	8006d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a0a      	ldr	r2, [pc, #40]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0xf8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a0c      	ldr	r2, [pc, #48]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d103      	bne.n	8006dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	615a      	str	r2, [r3, #20]
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40010400 	.word	0x40010400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800
 8006e08:	40001800 	.word	0x40001800
 8006e0c:	40001c00 	.word	0x40001c00
 8006e10:	40002000 	.word	0x40002000

08006e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f023 0201 	bic.w	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 030a 	bic.w	r3, r3, #10
 8006e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b087      	sub	sp, #28
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0210 	bic.w	r2, r3, #16
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f043 0307 	orr.w	r3, r3, #7
 8006ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	609a      	str	r2, [r3, #8]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	021a      	lsls	r2, r3, #8
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	609a      	str	r2, [r3, #8]
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e05a      	b.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a21      	ldr	r2, [pc, #132]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fac:	d01d      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a18      	ldr	r2, [pc, #96]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a15      	ldr	r2, [pc, #84]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d10c      	bne.n	8007004 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40010400 	.word	0x40010400
 8007038:	40014000 	.word	0x40014000
 800703c:	40001800 	.word	0x40001800

08007040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e03f      	b.n	80070d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fd f844 	bl	80040f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2224      	movs	r2, #36	; 0x24
 8007070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f829 	bl	80070dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	b085      	sub	sp, #20
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	4313      	orrs	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800711e:	f023 030c 	bic.w	r3, r3, #12
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	430b      	orrs	r3, r1
 800712a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714a:	f040 818b 	bne.w	8007464 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4ac1      	ldr	r2, [pc, #772]	; (8007458 <UART_SetConfig+0x37c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d005      	beq.n	8007164 <UART_SetConfig+0x88>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4abf      	ldr	r2, [pc, #764]	; (800745c <UART_SetConfig+0x380>)
 800715e:	4293      	cmp	r3, r2
 8007160:	f040 80bd 	bne.w	80072de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007164:	f7fe fb2e 	bl	80057c4 <HAL_RCC_GetPCLK2Freq>
 8007168:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	461d      	mov	r5, r3
 800716e:	f04f 0600 	mov.w	r6, #0
 8007172:	46a8      	mov	r8, r5
 8007174:	46b1      	mov	r9, r6
 8007176:	eb18 0308 	adds.w	r3, r8, r8
 800717a:	eb49 0409 	adc.w	r4, r9, r9
 800717e:	4698      	mov	r8, r3
 8007180:	46a1      	mov	r9, r4
 8007182:	eb18 0805 	adds.w	r8, r8, r5
 8007186:	eb49 0906 	adc.w	r9, r9, r6
 800718a:	f04f 0100 	mov.w	r1, #0
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007196:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800719a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800719e:	4688      	mov	r8, r1
 80071a0:	4691      	mov	r9, r2
 80071a2:	eb18 0005 	adds.w	r0, r8, r5
 80071a6:	eb49 0106 	adc.w	r1, r9, r6
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	461d      	mov	r5, r3
 80071b0:	f04f 0600 	mov.w	r6, #0
 80071b4:	196b      	adds	r3, r5, r5
 80071b6:	eb46 0406 	adc.w	r4, r6, r6
 80071ba:	461a      	mov	r2, r3
 80071bc:	4623      	mov	r3, r4
 80071be:	f7f9 f881 	bl	80002c4 <__aeabi_uldivmod>
 80071c2:	4603      	mov	r3, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	461a      	mov	r2, r3
 80071c8:	4ba5      	ldr	r3, [pc, #660]	; (8007460 <UART_SetConfig+0x384>)
 80071ca:	fba3 2302 	umull	r2, r3, r3, r2
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	461d      	mov	r5, r3
 80071d8:	f04f 0600 	mov.w	r6, #0
 80071dc:	46a9      	mov	r9, r5
 80071de:	46b2      	mov	sl, r6
 80071e0:	eb19 0309 	adds.w	r3, r9, r9
 80071e4:	eb4a 040a 	adc.w	r4, sl, sl
 80071e8:	4699      	mov	r9, r3
 80071ea:	46a2      	mov	sl, r4
 80071ec:	eb19 0905 	adds.w	r9, r9, r5
 80071f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80071f4:	f04f 0100 	mov.w	r1, #0
 80071f8:	f04f 0200 	mov.w	r2, #0
 80071fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007208:	4689      	mov	r9, r1
 800720a:	4692      	mov	sl, r2
 800720c:	eb19 0005 	adds.w	r0, r9, r5
 8007210:	eb4a 0106 	adc.w	r1, sl, r6
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	461d      	mov	r5, r3
 800721a:	f04f 0600 	mov.w	r6, #0
 800721e:	196b      	adds	r3, r5, r5
 8007220:	eb46 0406 	adc.w	r4, r6, r6
 8007224:	461a      	mov	r2, r3
 8007226:	4623      	mov	r3, r4
 8007228:	f7f9 f84c 	bl	80002c4 <__aeabi_uldivmod>
 800722c:	4603      	mov	r3, r0
 800722e:	460c      	mov	r4, r1
 8007230:	461a      	mov	r2, r3
 8007232:	4b8b      	ldr	r3, [pc, #556]	; (8007460 <UART_SetConfig+0x384>)
 8007234:	fba3 1302 	umull	r1, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	2164      	movs	r1, #100	; 0x64
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	3332      	adds	r3, #50	; 0x32
 8007246:	4a86      	ldr	r2, [pc, #536]	; (8007460 <UART_SetConfig+0x384>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007254:	4498      	add	r8, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	461d      	mov	r5, r3
 800725a:	f04f 0600 	mov.w	r6, #0
 800725e:	46a9      	mov	r9, r5
 8007260:	46b2      	mov	sl, r6
 8007262:	eb19 0309 	adds.w	r3, r9, r9
 8007266:	eb4a 040a 	adc.w	r4, sl, sl
 800726a:	4699      	mov	r9, r3
 800726c:	46a2      	mov	sl, r4
 800726e:	eb19 0905 	adds.w	r9, r9, r5
 8007272:	eb4a 0a06 	adc.w	sl, sl, r6
 8007276:	f04f 0100 	mov.w	r1, #0
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800728a:	4689      	mov	r9, r1
 800728c:	4692      	mov	sl, r2
 800728e:	eb19 0005 	adds.w	r0, r9, r5
 8007292:	eb4a 0106 	adc.w	r1, sl, r6
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	461d      	mov	r5, r3
 800729c:	f04f 0600 	mov.w	r6, #0
 80072a0:	196b      	adds	r3, r5, r5
 80072a2:	eb46 0406 	adc.w	r4, r6, r6
 80072a6:	461a      	mov	r2, r3
 80072a8:	4623      	mov	r3, r4
 80072aa:	f7f9 f80b 	bl	80002c4 <__aeabi_uldivmod>
 80072ae:	4603      	mov	r3, r0
 80072b0:	460c      	mov	r4, r1
 80072b2:	461a      	mov	r2, r3
 80072b4:	4b6a      	ldr	r3, [pc, #424]	; (8007460 <UART_SetConfig+0x384>)
 80072b6:	fba3 1302 	umull	r1, r3, r3, r2
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	2164      	movs	r1, #100	; 0x64
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	3332      	adds	r3, #50	; 0x32
 80072c8:	4a65      	ldr	r2, [pc, #404]	; (8007460 <UART_SetConfig+0x384>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	f003 0207 	and.w	r2, r3, #7
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4442      	add	r2, r8
 80072da:	609a      	str	r2, [r3, #8]
 80072dc:	e26f      	b.n	80077be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072de:	f7fe fa5d 	bl	800579c <HAL_RCC_GetPCLK1Freq>
 80072e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	461d      	mov	r5, r3
 80072e8:	f04f 0600 	mov.w	r6, #0
 80072ec:	46a8      	mov	r8, r5
 80072ee:	46b1      	mov	r9, r6
 80072f0:	eb18 0308 	adds.w	r3, r8, r8
 80072f4:	eb49 0409 	adc.w	r4, r9, r9
 80072f8:	4698      	mov	r8, r3
 80072fa:	46a1      	mov	r9, r4
 80072fc:	eb18 0805 	adds.w	r8, r8, r5
 8007300:	eb49 0906 	adc.w	r9, r9, r6
 8007304:	f04f 0100 	mov.w	r1, #0
 8007308:	f04f 0200 	mov.w	r2, #0
 800730c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007310:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007314:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007318:	4688      	mov	r8, r1
 800731a:	4691      	mov	r9, r2
 800731c:	eb18 0005 	adds.w	r0, r8, r5
 8007320:	eb49 0106 	adc.w	r1, r9, r6
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	461d      	mov	r5, r3
 800732a:	f04f 0600 	mov.w	r6, #0
 800732e:	196b      	adds	r3, r5, r5
 8007330:	eb46 0406 	adc.w	r4, r6, r6
 8007334:	461a      	mov	r2, r3
 8007336:	4623      	mov	r3, r4
 8007338:	f7f8 ffc4 	bl	80002c4 <__aeabi_uldivmod>
 800733c:	4603      	mov	r3, r0
 800733e:	460c      	mov	r4, r1
 8007340:	461a      	mov	r2, r3
 8007342:	4b47      	ldr	r3, [pc, #284]	; (8007460 <UART_SetConfig+0x384>)
 8007344:	fba3 2302 	umull	r2, r3, r3, r2
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	461d      	mov	r5, r3
 8007352:	f04f 0600 	mov.w	r6, #0
 8007356:	46a9      	mov	r9, r5
 8007358:	46b2      	mov	sl, r6
 800735a:	eb19 0309 	adds.w	r3, r9, r9
 800735e:	eb4a 040a 	adc.w	r4, sl, sl
 8007362:	4699      	mov	r9, r3
 8007364:	46a2      	mov	sl, r4
 8007366:	eb19 0905 	adds.w	r9, r9, r5
 800736a:	eb4a 0a06 	adc.w	sl, sl, r6
 800736e:	f04f 0100 	mov.w	r1, #0
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800737a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800737e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007382:	4689      	mov	r9, r1
 8007384:	4692      	mov	sl, r2
 8007386:	eb19 0005 	adds.w	r0, r9, r5
 800738a:	eb4a 0106 	adc.w	r1, sl, r6
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	461d      	mov	r5, r3
 8007394:	f04f 0600 	mov.w	r6, #0
 8007398:	196b      	adds	r3, r5, r5
 800739a:	eb46 0406 	adc.w	r4, r6, r6
 800739e:	461a      	mov	r2, r3
 80073a0:	4623      	mov	r3, r4
 80073a2:	f7f8 ff8f 	bl	80002c4 <__aeabi_uldivmod>
 80073a6:	4603      	mov	r3, r0
 80073a8:	460c      	mov	r4, r1
 80073aa:	461a      	mov	r2, r3
 80073ac:	4b2c      	ldr	r3, [pc, #176]	; (8007460 <UART_SetConfig+0x384>)
 80073ae:	fba3 1302 	umull	r1, r3, r3, r2
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	2164      	movs	r1, #100	; 0x64
 80073b6:	fb01 f303 	mul.w	r3, r1, r3
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	3332      	adds	r3, #50	; 0x32
 80073c0:	4a27      	ldr	r2, [pc, #156]	; (8007460 <UART_SetConfig+0x384>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073ce:	4498      	add	r8, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	461d      	mov	r5, r3
 80073d4:	f04f 0600 	mov.w	r6, #0
 80073d8:	46a9      	mov	r9, r5
 80073da:	46b2      	mov	sl, r6
 80073dc:	eb19 0309 	adds.w	r3, r9, r9
 80073e0:	eb4a 040a 	adc.w	r4, sl, sl
 80073e4:	4699      	mov	r9, r3
 80073e6:	46a2      	mov	sl, r4
 80073e8:	eb19 0905 	adds.w	r9, r9, r5
 80073ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80073f0:	f04f 0100 	mov.w	r1, #0
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007404:	4689      	mov	r9, r1
 8007406:	4692      	mov	sl, r2
 8007408:	eb19 0005 	adds.w	r0, r9, r5
 800740c:	eb4a 0106 	adc.w	r1, sl, r6
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	461d      	mov	r5, r3
 8007416:	f04f 0600 	mov.w	r6, #0
 800741a:	196b      	adds	r3, r5, r5
 800741c:	eb46 0406 	adc.w	r4, r6, r6
 8007420:	461a      	mov	r2, r3
 8007422:	4623      	mov	r3, r4
 8007424:	f7f8 ff4e 	bl	80002c4 <__aeabi_uldivmod>
 8007428:	4603      	mov	r3, r0
 800742a:	460c      	mov	r4, r1
 800742c:	461a      	mov	r2, r3
 800742e:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <UART_SetConfig+0x384>)
 8007430:	fba3 1302 	umull	r1, r3, r3, r2
 8007434:	095b      	lsrs	r3, r3, #5
 8007436:	2164      	movs	r1, #100	; 0x64
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	3332      	adds	r3, #50	; 0x32
 8007442:	4a07      	ldr	r2, [pc, #28]	; (8007460 <UART_SetConfig+0x384>)
 8007444:	fba2 2303 	umull	r2, r3, r2, r3
 8007448:	095b      	lsrs	r3, r3, #5
 800744a:	f003 0207 	and.w	r2, r3, #7
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4442      	add	r2, r8
 8007454:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007456:	e1b2      	b.n	80077be <UART_SetConfig+0x6e2>
 8007458:	40011000 	.word	0x40011000
 800745c:	40011400 	.word	0x40011400
 8007460:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4ad7      	ldr	r2, [pc, #860]	; (80077c8 <UART_SetConfig+0x6ec>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d005      	beq.n	800747a <UART_SetConfig+0x39e>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4ad6      	ldr	r2, [pc, #856]	; (80077cc <UART_SetConfig+0x6f0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	f040 80d1 	bne.w	800761c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800747a:	f7fe f9a3 	bl	80057c4 <HAL_RCC_GetPCLK2Freq>
 800747e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	469a      	mov	sl, r3
 8007484:	f04f 0b00 	mov.w	fp, #0
 8007488:	46d0      	mov	r8, sl
 800748a:	46d9      	mov	r9, fp
 800748c:	eb18 0308 	adds.w	r3, r8, r8
 8007490:	eb49 0409 	adc.w	r4, r9, r9
 8007494:	4698      	mov	r8, r3
 8007496:	46a1      	mov	r9, r4
 8007498:	eb18 080a 	adds.w	r8, r8, sl
 800749c:	eb49 090b 	adc.w	r9, r9, fp
 80074a0:	f04f 0100 	mov.w	r1, #0
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074b4:	4688      	mov	r8, r1
 80074b6:	4691      	mov	r9, r2
 80074b8:	eb1a 0508 	adds.w	r5, sl, r8
 80074bc:	eb4b 0609 	adc.w	r6, fp, r9
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4619      	mov	r1, r3
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	f04f 0400 	mov.w	r4, #0
 80074d2:	0094      	lsls	r4, r2, #2
 80074d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074d8:	008b      	lsls	r3, r1, #2
 80074da:	461a      	mov	r2, r3
 80074dc:	4623      	mov	r3, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	4631      	mov	r1, r6
 80074e2:	f7f8 feef 	bl	80002c4 <__aeabi_uldivmod>
 80074e6:	4603      	mov	r3, r0
 80074e8:	460c      	mov	r4, r1
 80074ea:	461a      	mov	r2, r3
 80074ec:	4bb8      	ldr	r3, [pc, #736]	; (80077d0 <UART_SetConfig+0x6f4>)
 80074ee:	fba3 2302 	umull	r2, r3, r3, r2
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	469b      	mov	fp, r3
 80074fc:	f04f 0c00 	mov.w	ip, #0
 8007500:	46d9      	mov	r9, fp
 8007502:	46e2      	mov	sl, ip
 8007504:	eb19 0309 	adds.w	r3, r9, r9
 8007508:	eb4a 040a 	adc.w	r4, sl, sl
 800750c:	4699      	mov	r9, r3
 800750e:	46a2      	mov	sl, r4
 8007510:	eb19 090b 	adds.w	r9, r9, fp
 8007514:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007518:	f04f 0100 	mov.w	r1, #0
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007524:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007528:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800752c:	4689      	mov	r9, r1
 800752e:	4692      	mov	sl, r2
 8007530:	eb1b 0509 	adds.w	r5, fp, r9
 8007534:	eb4c 060a 	adc.w	r6, ip, sl
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	4619      	mov	r1, r3
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	f04f 0400 	mov.w	r4, #0
 800754a:	0094      	lsls	r4, r2, #2
 800754c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007550:	008b      	lsls	r3, r1, #2
 8007552:	461a      	mov	r2, r3
 8007554:	4623      	mov	r3, r4
 8007556:	4628      	mov	r0, r5
 8007558:	4631      	mov	r1, r6
 800755a:	f7f8 feb3 	bl	80002c4 <__aeabi_uldivmod>
 800755e:	4603      	mov	r3, r0
 8007560:	460c      	mov	r4, r1
 8007562:	461a      	mov	r2, r3
 8007564:	4b9a      	ldr	r3, [pc, #616]	; (80077d0 <UART_SetConfig+0x6f4>)
 8007566:	fba3 1302 	umull	r1, r3, r3, r2
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	2164      	movs	r1, #100	; 0x64
 800756e:	fb01 f303 	mul.w	r3, r1, r3
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	3332      	adds	r3, #50	; 0x32
 8007578:	4a95      	ldr	r2, [pc, #596]	; (80077d0 <UART_SetConfig+0x6f4>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007584:	4498      	add	r8, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	469b      	mov	fp, r3
 800758a:	f04f 0c00 	mov.w	ip, #0
 800758e:	46d9      	mov	r9, fp
 8007590:	46e2      	mov	sl, ip
 8007592:	eb19 0309 	adds.w	r3, r9, r9
 8007596:	eb4a 040a 	adc.w	r4, sl, sl
 800759a:	4699      	mov	r9, r3
 800759c:	46a2      	mov	sl, r4
 800759e:	eb19 090b 	adds.w	r9, r9, fp
 80075a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075a6:	f04f 0100 	mov.w	r1, #0
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075ba:	4689      	mov	r9, r1
 80075bc:	4692      	mov	sl, r2
 80075be:	eb1b 0509 	adds.w	r5, fp, r9
 80075c2:	eb4c 060a 	adc.w	r6, ip, sl
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	4619      	mov	r1, r3
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	f04f 0400 	mov.w	r4, #0
 80075d8:	0094      	lsls	r4, r2, #2
 80075da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075de:	008b      	lsls	r3, r1, #2
 80075e0:	461a      	mov	r2, r3
 80075e2:	4623      	mov	r3, r4
 80075e4:	4628      	mov	r0, r5
 80075e6:	4631      	mov	r1, r6
 80075e8:	f7f8 fe6c 	bl	80002c4 <__aeabi_uldivmod>
 80075ec:	4603      	mov	r3, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	461a      	mov	r2, r3
 80075f2:	4b77      	ldr	r3, [pc, #476]	; (80077d0 <UART_SetConfig+0x6f4>)
 80075f4:	fba3 1302 	umull	r1, r3, r3, r2
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	2164      	movs	r1, #100	; 0x64
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	3332      	adds	r3, #50	; 0x32
 8007606:	4a72      	ldr	r2, [pc, #456]	; (80077d0 <UART_SetConfig+0x6f4>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	f003 020f 	and.w	r2, r3, #15
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4442      	add	r2, r8
 8007618:	609a      	str	r2, [r3, #8]
 800761a:	e0d0      	b.n	80077be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800761c:	f7fe f8be 	bl	800579c <HAL_RCC_GetPCLK1Freq>
 8007620:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	469a      	mov	sl, r3
 8007626:	f04f 0b00 	mov.w	fp, #0
 800762a:	46d0      	mov	r8, sl
 800762c:	46d9      	mov	r9, fp
 800762e:	eb18 0308 	adds.w	r3, r8, r8
 8007632:	eb49 0409 	adc.w	r4, r9, r9
 8007636:	4698      	mov	r8, r3
 8007638:	46a1      	mov	r9, r4
 800763a:	eb18 080a 	adds.w	r8, r8, sl
 800763e:	eb49 090b 	adc.w	r9, r9, fp
 8007642:	f04f 0100 	mov.w	r1, #0
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800764e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007652:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007656:	4688      	mov	r8, r1
 8007658:	4691      	mov	r9, r2
 800765a:	eb1a 0508 	adds.w	r5, sl, r8
 800765e:	eb4b 0609 	adc.w	r6, fp, r9
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4619      	mov	r1, r3
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	f04f 0400 	mov.w	r4, #0
 8007674:	0094      	lsls	r4, r2, #2
 8007676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800767a:	008b      	lsls	r3, r1, #2
 800767c:	461a      	mov	r2, r3
 800767e:	4623      	mov	r3, r4
 8007680:	4628      	mov	r0, r5
 8007682:	4631      	mov	r1, r6
 8007684:	f7f8 fe1e 	bl	80002c4 <__aeabi_uldivmod>
 8007688:	4603      	mov	r3, r0
 800768a:	460c      	mov	r4, r1
 800768c:	461a      	mov	r2, r3
 800768e:	4b50      	ldr	r3, [pc, #320]	; (80077d0 <UART_SetConfig+0x6f4>)
 8007690:	fba3 2302 	umull	r2, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	469b      	mov	fp, r3
 800769e:	f04f 0c00 	mov.w	ip, #0
 80076a2:	46d9      	mov	r9, fp
 80076a4:	46e2      	mov	sl, ip
 80076a6:	eb19 0309 	adds.w	r3, r9, r9
 80076aa:	eb4a 040a 	adc.w	r4, sl, sl
 80076ae:	4699      	mov	r9, r3
 80076b0:	46a2      	mov	sl, r4
 80076b2:	eb19 090b 	adds.w	r9, r9, fp
 80076b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076ba:	f04f 0100 	mov.w	r1, #0
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076ce:	4689      	mov	r9, r1
 80076d0:	4692      	mov	sl, r2
 80076d2:	eb1b 0509 	adds.w	r5, fp, r9
 80076d6:	eb4c 060a 	adc.w	r6, ip, sl
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	4619      	mov	r1, r3
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	0094      	lsls	r4, r2, #2
 80076ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076f2:	008b      	lsls	r3, r1, #2
 80076f4:	461a      	mov	r2, r3
 80076f6:	4623      	mov	r3, r4
 80076f8:	4628      	mov	r0, r5
 80076fa:	4631      	mov	r1, r6
 80076fc:	f7f8 fde2 	bl	80002c4 <__aeabi_uldivmod>
 8007700:	4603      	mov	r3, r0
 8007702:	460c      	mov	r4, r1
 8007704:	461a      	mov	r2, r3
 8007706:	4b32      	ldr	r3, [pc, #200]	; (80077d0 <UART_SetConfig+0x6f4>)
 8007708:	fba3 1302 	umull	r1, r3, r3, r2
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	2164      	movs	r1, #100	; 0x64
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	3332      	adds	r3, #50	; 0x32
 800771a:	4a2d      	ldr	r2, [pc, #180]	; (80077d0 <UART_SetConfig+0x6f4>)
 800771c:	fba2 2303 	umull	r2, r3, r2, r3
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007726:	4498      	add	r8, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	469b      	mov	fp, r3
 800772c:	f04f 0c00 	mov.w	ip, #0
 8007730:	46d9      	mov	r9, fp
 8007732:	46e2      	mov	sl, ip
 8007734:	eb19 0309 	adds.w	r3, r9, r9
 8007738:	eb4a 040a 	adc.w	r4, sl, sl
 800773c:	4699      	mov	r9, r3
 800773e:	46a2      	mov	sl, r4
 8007740:	eb19 090b 	adds.w	r9, r9, fp
 8007744:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007748:	f04f 0100 	mov.w	r1, #0
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007754:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007758:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800775c:	4689      	mov	r9, r1
 800775e:	4692      	mov	sl, r2
 8007760:	eb1b 0509 	adds.w	r5, fp, r9
 8007764:	eb4c 060a 	adc.w	r6, ip, sl
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	4619      	mov	r1, r3
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	f04f 0300 	mov.w	r3, #0
 8007776:	f04f 0400 	mov.w	r4, #0
 800777a:	0094      	lsls	r4, r2, #2
 800777c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007780:	008b      	lsls	r3, r1, #2
 8007782:	461a      	mov	r2, r3
 8007784:	4623      	mov	r3, r4
 8007786:	4628      	mov	r0, r5
 8007788:	4631      	mov	r1, r6
 800778a:	f7f8 fd9b 	bl	80002c4 <__aeabi_uldivmod>
 800778e:	4603      	mov	r3, r0
 8007790:	460c      	mov	r4, r1
 8007792:	461a      	mov	r2, r3
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <UART_SetConfig+0x6f4>)
 8007796:	fba3 1302 	umull	r1, r3, r3, r2
 800779a:	095b      	lsrs	r3, r3, #5
 800779c:	2164      	movs	r1, #100	; 0x64
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	3332      	adds	r3, #50	; 0x32
 80077a8:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <UART_SetConfig+0x6f4>)
 80077aa:	fba2 2303 	umull	r2, r3, r2, r3
 80077ae:	095b      	lsrs	r3, r3, #5
 80077b0:	f003 020f 	and.w	r2, r3, #15
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4442      	add	r2, r8
 80077ba:	609a      	str	r2, [r3, #8]
}
 80077bc:	e7ff      	b.n	80077be <UART_SetConfig+0x6e2>
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c8:	40011000 	.word	0x40011000
 80077cc:	40011400 	.word	0x40011400
 80077d0:	51eb851f 	.word	0x51eb851f

080077d4 <__libc_init_array>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4e0d      	ldr	r6, [pc, #52]	; (800780c <__libc_init_array+0x38>)
 80077d8:	4c0d      	ldr	r4, [pc, #52]	; (8007810 <__libc_init_array+0x3c>)
 80077da:	1ba4      	subs	r4, r4, r6
 80077dc:	10a4      	asrs	r4, r4, #2
 80077de:	2500      	movs	r5, #0
 80077e0:	42a5      	cmp	r5, r4
 80077e2:	d109      	bne.n	80077f8 <__libc_init_array+0x24>
 80077e4:	4e0b      	ldr	r6, [pc, #44]	; (8007814 <__libc_init_array+0x40>)
 80077e6:	4c0c      	ldr	r4, [pc, #48]	; (8007818 <__libc_init_array+0x44>)
 80077e8:	f000 f820 	bl	800782c <_init>
 80077ec:	1ba4      	subs	r4, r4, r6
 80077ee:	10a4      	asrs	r4, r4, #2
 80077f0:	2500      	movs	r5, #0
 80077f2:	42a5      	cmp	r5, r4
 80077f4:	d105      	bne.n	8007802 <__libc_init_array+0x2e>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077fc:	4798      	blx	r3
 80077fe:	3501      	adds	r5, #1
 8007800:	e7ee      	b.n	80077e0 <__libc_init_array+0xc>
 8007802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007806:	4798      	blx	r3
 8007808:	3501      	adds	r5, #1
 800780a:	e7f2      	b.n	80077f2 <__libc_init_array+0x1e>
 800780c:	08024cd4 	.word	0x08024cd4
 8007810:	08024cd4 	.word	0x08024cd4
 8007814:	08024cd4 	.word	0x08024cd4
 8007818:	08024cd8 	.word	0x08024cd8

0800781c <memset>:
 800781c:	4402      	add	r2, r0
 800781e:	4603      	mov	r3, r0
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <memset+0xa>
 8007824:	4770      	bx	lr
 8007826:	f803 1b01 	strb.w	r1, [r3], #1
 800782a:	e7f9      	b.n	8007820 <memset+0x4>

0800782c <_init>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr

08007838 <_fini>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr
